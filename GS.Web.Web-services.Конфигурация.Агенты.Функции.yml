%YAML 1.1
--- 
StructureVersion: "1.0"
Properties: 
  RUID: 147170928_1545785791
  Name: "GS.Web.Web-services.Конфигурация.Агенты.Функции"
  Caption: "GS.Web.Web-services.Конфигурация.Агенты.Функции"
  Version: "1.0.0.62"
  Optional: False
  Internal: True
  MD5: 06224FD57B5B4E5C0FBE1069F8AEC928
Uses: 
  - "148998542_1521203129 GS.Web.Web-services.Конфигурация.Функции"
  - "148998636_1521203129 GS.Web.Web-services.Конфигурация.Исследователь"
  - "147170904_1545785791 GS.Web.Web-services.Конфигурация.Агенты.Метаданные"
  - "679992010_1913435101 GS.Web.Web-services.Документы.Агенты.Метаданные"
Objects: 
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 472928121_1549072347
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      NAME: "web_AutoCreateDebt_Agents"
      COMMENT: ~
      EVENT: ~
      FUNCTIONTYPE: ~
      GROUPNAME: ~
      INHERITEDRULE: 0
      LANGUAGE: "VBScript"
      LOCALNAME: ~
      MODIFYDATE: ~
      MODULE: "UNKNOWN"
      MODULECODE: "1010001_17 APPLICATION"
      OBJECTNAME: "APPLICATION"
      OWNERNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      USEDEBUGINFO: 0
      EDITIONDATE: 2022-09-23T19:39:31+03:00
      DISPLAYSCRIPT: | 
        WEB_AUTOCREATEDEBT_AGENTS
        WEB_AUTOCREATEDEBT_AGENTS_ROLLBACK
        
      ENTEREDPARAMS: ~
      SCRIPT: | 
        Option Explicit
        Function web_AutoCreateDebt_Agents
          dim Creator, ibsql, Transaction, ibsqlCustomers, ibsqlDebt, sqlText, CustomerStr, i
          dim saldo, saldo_credit, saldo_debt, userkey, contactkey, ibsqlInsert, dayleft, datedebt, id
          dim ibsqlTempInsert, ibsqlGetID, contrnumber, contrdate
          set Creator = new TCreator
          set Transaction = Creator.GetObject(nil, "TIBTransaction", "")
          Transaction.DefaultDataBase = IBLogin.Database
          if not Transaction.InTransaction then
             Transaction.StartTransaction
          end if
          set ibsqlInsert = Creator.GetObject(nil, "TIBSQL", "")
          ibsqlInsert.Transaction = Transaction
          ibsqlInsert.SQL.Text = _
            "insert into USR$GDMN_DEBT (ID, USR$CONTACTKEY, USR$USERKEY, USR$SALDO, USR$SALDO_CREDIT, USR$SALDO_DEBT, USR$DATEDEBT, USR$DAYLEFT, USR$CONTRNUMBER, USR$CONTRDATE) " & _
            "values (:ID, :CONTACTKEY, :USERKEY, :SALDO, :SALDO_CREDIT, :SALDO_DEBT, :DATEDEBT, :DAYLEFT, :CONTRNUMBER, :CONTRDATE) "
        
          set ibsqlTempInsert = Creator.GetObject(nil, "TIBSQL", "")
          ibsqlTempInsert.Transaction = Transaction
          ibsqlTempInsert.SQL.Text = _
            "insert into USR$WEB_DEBT (ID, USR$CONTACTKEY,  USR$SALDO, USR$SALDO_CREDIT, USR$SALDO_DEBT, USR$DATEDEBT, USR$DAYLEFT, USR$CONTRNUMBER, USR$CONTRDATE) " & _
            "values (:ID, :CONTACTKEY, :SALDO, :SALDO_CREDIT, :SALDO_DEBT, :DATEDEBT, :DAYLEFT, :CONTRNUMBER, :CONTRDATE) "
        
          except web_AutoCreateDebt_Agents_Rollback(Transaction)
          set ibsql = Creator.GetObject(nil, "TIBSQL", "")
          ibsql.Transaction = Transaction
          'Очищаем вспомогательную таблицу
          ibsql.Close
          ibsql.SQL.Text = _
            "delete from USR$GDMN_DEBT "
          ibsql.ExecQuery
          'Достаем всех активных агентов для мобильного приложения
          ibsql.Close
          ibsql.SQL.Text = _
            "select b.USR$CONTACTKEY as CONTACTKEY " & _
            "from USR$GDMN_USERS b " & _
            "where coalesce(b.USR$NOTACTIVE, 0) = 0 " & _
            "and not b.USR$CONTACTKEY is null "
          ibsql.ExecQuery
          set ibsqlCustomers = Creator.GetObject(nil, "TIBSQL", "")
          ibsqlCustomers.Transaction = Transaction
          set ibsqlDebt = Creator.GetObject(nil, "TIBSQL", "")
          ibsqlDebt.Transaction = Transaction
          sqlText = _
            " " & _
            "execute block " & _
            "RETURNS ( " & _
            "    NAME VARCHAR(60), " & _
            "    ID INTEGER, " & _
            "    CURRKEY INTEGER, " & _
            "    DAYLEFT INTEGER, " & _
            "    DATEDEBT DATE, " & _
            "    SALDO NUMERIC(18, 4), " & _
            "    SALDO_CREDIT NUMERIC(15, 4), " & _
            "    SALDO_DEBT NUMERIC(18, 4), " & _
            "    CONTRDATE DATE, " & _
            "    CONTRNUMBER VARCHAR(20)) " & _
            " AS " & _
            "  declare variable tempsum numeric(15,4); " & _
            "  declare variable tempsaldo numeric(15,4); " & _
            "  declare variable pay_int decimal(18,4); " & _
            "  declare variable pay_int_curr decimal(18,4); " & _
            "  declare variable datedebt_temp date; " & _
            "  declare variable date_debt1 date; " & _
            "  declare variable countday integer; " & _
            "  declare variable countaddday integer; " & _
            "  declare variable tmp_countday integer; " & _
            "  declare variable tmp_countaddday integer; " & _
            "  declare variable isok integer; " & _
            "  declare variable isfirst integer; " & _
            "  declare variable paysum numeric(15,4); " & _
            "  declare variable paysum_temp numeric(15,4); " & _
            "  declare variable documentkey integer; " & _
            "  declare variable doc_temp integer; " & _
            "  declare variable lastrealdate DATE; " & _
            "  declare variable firstdate DATE; " & _
            "  declare variable tmpfirstdate DATE; " & _
            "  declare variable tmpisp VARCHAR(60); " & _
            "BEGIN " & _
            "  firstdate = CAST((CAST('17.11.1858'AS DATE)+GEN_ID(gd_g_entry_balance_date,0)) AS DATE); " & _
            "  if (firstdate > CURRENT_DATE) then " & _
            "    tmpfirstdate = CAST('17.11.1858'AS DATE); " & _
            "  else " & _
            "    tmpfirstdate = firstdate; " & _
            "     FOR " & _
            "        SELECT " & _
            "          con.name, " & _
            "          con.id, " & _
            "          SUM(e.debitncu - e.creditncu) AS saldo " & _
            "        FROM " & _
            "          (select e.usr$gs_customer, e.debitncu, e.creditncu " & _
            "          from " & _
            "            ac_entry e " & _
            "          where " & _
            "            e.entrydate <= CURRENT_DATE AND " & _
            "            e.accountkey = 366201 AND " & _
            "            e.companykey + 0 = <companykey/> AND " & _
            "            e.currkey = 200010 and (e.usr$gs_customer in (%customer%) or e.usr$gs_customer in (%customer2%))" & _
            "     ) e " & _
            "         LEFT JOIN " & _
            "              gd_contact con ON e.usr$gs_customer = con.id " & _
            "        GROUP BY " & _
            "          1, 2 " & _
            "        HAVING g_m_round(SUM(e.debitncu - e.creditncu) / 10) * 10 <> 0 " & _
            "        ORDER BY 1 " & _
            "        INTO :NAME, " & _
            "             :ID, " & _
            "             :SALDO " & _
            "      DO " & _
            "      BEGIN " & _
            " " & _
            "        tmp_countday = 0; " & _
            "        tmp_countaddday = 0; " & _
            " " & _
            "        countday = 0; " & _
            "        countaddday = 0; " & _
            "        dayleft = 0; " & _
            "        SELECT " & _
            "          FIRST (1) doc.documentdate, doc.NUMBER, p.usr$countday, p.usr$vmk_countaddday, " & _
            "          (CASE WHEN p.usr$isbank = 1 THEN COALESCE(p.usr$countday, 0) + 2 * COALESCE(p.usr$countday, 0) / 5 ELSE COALESCE(p.usr$countday, 0) END) AS countday, " & _
            "          (CASE WHEN p.usr$isaddbank = 1 THEN COALESCE(p.usr$vmk_countaddday, 0) + 2 * COALESCE(p.usr$vmk_countaddday, 0) / 5 ELSE COALESCE(p.usr$vmk_countaddday, 0) END) AS countaddday " & _
            "        FROM " & _
            "          usr$inv_contract cont " & _
            "            LEFT JOIN gd_document doc ON cont.documentkey = doc.id " & _
            "            LEFT JOIN usr$inv_paycond p ON cont.usr$paycondkey = p.id " & _
            "        WHERE " & _
            "          cont.usr$contactkey = :id AND cont.usr$vmk_typecontract IS NULL AND doc.documentdate <= CURRENT_DATE  and (cont.usr$DATEEND >= CURRENT_DATE or cont.usr$DATEEND is null) " & _
            "        ORDER BY doc.documentdate DESC " & _
            "        INTO :contrdate, :contrnumber, :tmp_countday, :tmp_countaddday, :countday, :countaddday; " & _
            "        countday = COALESCE(countday, 0) + COALESCE(countaddday, 0); " & _
            "        datedebt_temp = contrdate; " & _
            "        IF (SALDO < 0) THEN " & _
            "        BEGIN " & _
            "          SALDO_CREDIT = -SALDO; " & _
            "          SALDO = 0; " & _
            "        END " & _
            "        ELSE " & _
            "          SALDO_CREDIT = 0; " & _
            " " & _
            "        SALDO_DEBT = 0; " & _
            "        PAY_INT = 0; " & _
            "        IF (SALDO > 0) THEN " & _
            "        BEGIN " & _
            "          date_debt1 = CURRENT_DATE - countday; " & _
            "          SELECT " & _
            "            SUM(CASE WHEN e.entrydate < :date_debt1 " & _
            "                THEN e.debitncu - e.creditncu ELSE 0 END) AS saldo_debt, " & _
            "            SUM(CASE WHEN (e.entrydate >= :date_debt1 AND e.entrydate <= CURRENT_DATE) " & _
            "                THEN e.creditncu - (CASE WHEN e.debitncu < 0 THEN e.debitncu ELSE 0 END) ELSE 0 END) AS pay_int " & _
            "          FROM " & _
            "            ac_entry e " & _
            "          WHERE " & _
            "            e.entrydate <= CURRENT_DATE AND " & _
            "            e.accountkey = 366201 AND " & _
            "            e.usr$gs_customer = :id  AND e.currkey = 200010 " & _
            "          INTO " & _
            "           :SALDO_DEBT, " & _
            "           :PAY_INT; " & _
            " " & _
            "          IF (SALDO_DEBT IS NULL) THEN " & _
            "            SALDO_DEBT = 0; " & _
            "          IF (PAY_INT IS NULL) THEN " & _
            "            PAY_INT = 0; " & _
            " " & _
            "          SALDO_DEBT = round(SALDO_DEBT - PAY_INT, 2); " & _
            "          IF (SALDO_DEBT < 0) THEN " & _
            "            SALDO_DEBT = 0; " & _
            "          tempsum = saldo; " & _
            "          isOk = 0; " & _
            "          isFirst = 1; " & _
            "          paysum = 0; " & _
            " " & _
            "          tempsum = saldo; " & _
            "          isOk = 0; " & _
            "          isFirst = 1; " & _
            "          paysum = 0; " & _
            "          FOR " & _
            "            SELECT e.entrydate, e.debitncu - e.creditncu " & _
            "            FROM " & _
            "              ac_entry e " & _
            "            WHERE " & _
            "                e.accountkey = 366201 AND " & _
            "                e.entrydate <= CURRENT_DATE AND " & _
            "                e.usr$gs_customer = :id AND " & _
            "                e.companykey + 0 = <companykey/> and (e.debitncu > 0 or e.creditncu < 0) " & _
            "            ORDER BY 1 DESC " & _
            "            INTO :datedebt_temp, :tempsaldo " & _
            "          DO " & _
            "          BEGIN " & _
            "            IF (isOk = 0) THEN " & _
            "            BEGIN " & _
            "              IF (tempsum > 0) THEN " & _
            "              BEGIN " & _
            "                tempsum = tempsum - tempsaldo; " & _
            "              END " & _
            "              ELSE " & _
            "              BEGIN " & _
            "                isOK = 1; " & _
            "                LEAVE; " & _
            "              END " & _
            "              DATEDEBT = DATEDEBT_TEMP; " & _
            "            END " & _
            "          END " & _
            "        END " & _
            "        IF (SALDO_DEBT > 0) THEN " & _
            "        BEGIN " & _
            "          DAYLEFT = CURRENT_DATE - DATEDEBT - COUNTDAY; " & _
            "          if ( dayleft < 0 ) then " & _
            "            dayleft = 0; " & _
            "        END " & _
            "        ELSE " & _
            "          dayleft = 0; " & _
            "           " & _
            "        SALDO = ROUND(saldo, 2); " & _
            "        SUSPEND; " & _
            "      END " & _
            "end "
        
          dim ibsqlTempDebt
          set ibsqlTempDebt = Creator.GetObject(nil, "TIBSQL", "")
          ibsqlTempDebt.Transaction = Transaction
        
          dim l, k, n
        
          if  ibsql.RecordCount > 0 then
            dim isErr
            on error resume next
            call gdcBaseManager.ExecSingleQuery("select USR$CONTACTKEY from USR$WEB_DEBT", Transaction)
            isErr = Err.Description <> ""
            on error goto 0
            if isErr then
              call gdcBaseManager.ExecSingleQuery("CREATE GLOBAL TEMPORARY TABLE USR$WEB_DEBT ( " & _
                "  ID	DINTKEY NOT NULL, " & _
                "  USR$CONTACTKEY	USR$VBPF_HEADCOMPANY, " & _
                "  USR$SALDO_DEBT	DCURRENCY, " & _
                "  USR$SALDO_CREDIT	DCURRENCY, " & _
                "  USR$SALDO	DCURRENCY, " & _
                "  USR$DAYLEFT	DSMALLINT, " & _
                "  USR$DATEDEBT	DDATE, " & _
                "  USR$CONTRNUMBER	DTEXT20,  " & _
                "  USR$CONTRDATE	DDATE) " & _
                "  on commit DELETE rows ", Transaction)
              call gdcBaseManager.ExecSingleQuery("GRANT ALL ON USR$WEB_DEBT TO administrator ", Transaction)
              Transaction.Commit
              Transaction.StartTransaction
            end if
            dim ibsqlDelete
            set ibsqlDelete = Creator.GetObject(nil, "TIBSQL", "")
            ibsqlDelete.Transaction = Transaction
            ibsqlDelete.SQl.Text = _
              " delete from USR$WEB_DEBT "
            ibsqlDelete.ExecQuery
            ibsqlCustomers.Close
            ibsqlCustomers.SQL.Text = _
             " WITH RECURSIVE " & _
             "            departs AS ( " & _
             "         SELECT " & _
             "            parent " & _
             "         FROM " & _
             "            gd_contact " & _
             "         WHERE (USR$CONTRADEAGENTKEY in ( " & _
             "           select (b.USR$CONTACTKEY) as CONTACTKEY " & _
             "           from USR$GDMN_USERS b " & _
             "           where coalesce(b.USR$NOTACTIVE, 0) = 0) " & _
             "         ) AND coalesce(disabled, 0) = 0 " & _
             "          UNION ALL " & _
             "          SELECT " & _
             "            g2.parent " & _
             "          FROM " & _
             "           gd_contact g2 JOIN departs gt ON g2.id = gt.parent and g2.contacttype = 3 " & _
             "          ORDER BY 3 " & _
             "          ) " & _
             "          SELECT " & _
             "            list(distinct con.parent) as listID " & _
             "          FROM " & _
             "            departs con "
            ibsqlCustomers.ExecQuery
        
            CustomerStr = ibsqlCustomers.FieldByName("listID").AsString
            if CustomerStr <> "" then
              ibsqlDebt.Close
              dim c, cc, cc1(), cc2(), c1(), c2()
              c = Split(CustomerStr, ",")
              n = 1500
              l = UBound(c) - LBound(c)
              For k = 0 to l
                if k < n then
                  Redim Preserve c1(k)
                  c1(k)= c(k)
                else
                  Redim Preserve c2(k-n)
                  c2(k-n) = c(k)
                end if
              Next
        
              ibsqlDebt.SQL.Text = Replace(sqlText, "%customer%", join(c1, ","))
              if l > n - 1 then
                ibsqlDebt.SQL.Text = Replace(ibsqlDebt.SQL.Text, "%customer2%", join(c2, ","))
              else
                ibsqlDebt.SQL.Text = Replace(ibsqlDebt.SQL.Text, "%customer2%", "-1")
              end if
              ibsqlDebt.ExecQuery
              i = 1
              while not ibsqlDebt.EOF
                contactkey = ibsqlDebt.FieldByName("id").AsInteger
                saldo = ibsqlDebt.FieldByName("saldo").AsCurrency
                saldo_credit = ibsqlDebt.FieldByName("saldo_credit").AsCurrency
                saldo_debt =  ibsqlDebt.FieldByName("saldo_debt").AsCurrency
                dayleft = ibsqlDebt.FieldByName("dayleft").AsInteger
                datedebt = ibsqlDebt.FieldByName("datedebt").AsDateTime
                contrdate = ibsqlDebt.FieldByName("contrdate").AsDateTime
                contrnumber = ibsqlDebt.FieldByName("contrnumber").AsString
                ibsqlTempInsert.Close
                ibsqlTempInsert.ParamByName("contactkey").AsInteger = contactkey
                ibsqlTempInsert.ParamByName("saldo").AsCurrency = saldo
                ibsqlTempInsert.ParamByName("saldo_credit").AsCurrency = saldo_credit
                ibsqlTempInsert.ParamByName("saldo_debt").AsCurrency = saldo_debt
                ibsqlTempInsert.ParamByName("datedebt").AsDateTime = datedebt
                ibsqlTempInsert.ParamByName("dayleft").AsInteger = dayleft
                ibsqlTempInsert.ParamByName("contrdate").AsDateTime = contrdate
                ibsqlTempInsert.ParamByName("contrnumber").AsString = contrnumber
                ibsqlTempInsert.ParamByName("id").AsInteger = i
                ibsqlTempInsert.ExecQuery
                ibsqlDebt.Next
                i = i + 1
              wend
            end if
        
            while not ibsql.EOF
              CustomerStr = ""
              ibsqlCustomers.Close
               ibsqlCustomers.SQL.Text = _
                "  WITH RECURSIVE " & _
                "      departs AS ( " & _
                "    SELECT " & _
                "      parent " & _
                "    FROM " & _
                "      gd_contact " & _
                "    WHERE (USR$CONTRADEAGENTKEY = :contactkey " & _
                "      OR coalesce(USR$VBPF_DOPTRADEAGENTKEY, 0) = :contactkey " & _
                "      OR coalesce(USR$VBPF_MERCHANDISER, 0) = :contactkey) " & _
                "      AND coalesce(disabled, 0) = 0 " & _
                "    UNION ALL " & _
                "    SELECT " & _
                "      g2.parent " & _
                "    FROM " & _
                "      gd_contact g2 JOIN departs gt ON g2.id = gt.parent and g2.contacttype = 3 " & _
                "    ORDER BY 3 " & _
                "    ) " & _
                "    SELECT " & _
                "      list(distinct con.parent) as listID " & _
                "    FROM " & _
                "      departs con "
              ibsqlCustomers.ParamByName("contactkey").AsInteger =  ibsql.FieldByName("contactkey").AsInteger
              ibsqlCustomers.ExecQuery
              CustomerStr = ibsqlCustomers.FieldByName("listID").AsString
              if CustomerStr <> "" then
                cc = Split(CustomerStr, ",")
                n = 1500
                l = UBound(cc) - LBound(cc)
                For k = 0 to l
                  if k < n then
                    Redim Preserve cc1(k)
                    cc1(k)= cc(k)
                  else
                    Redim Preserve cc2(k-n)
                    cc2(k-n) = cc(k)
                  end if
                Next
        
                dim strWhere
                if l > n - 1 then
                  strWhere = join(cc2, ",")
                else
                  strWhere = "-1"
                end if
        
                ibsqlTempDebt.Close
                ibsqlTempDebt.SQL.Text = _
                   " select * " & _
                   " from USR$WEB_DEBT b " & _
                   " where (b.USR$CONTACTKEY in (" & join(cc1, ",") & ") or b.USR$CONTACTKEY in (" & strWhere & ") ) "
                ibsqlTempDebt.ExecQuery
                while not ibsqlTempDebt.EOF
                  contactkey = ibsqlTempDebt.FieldByName("USR$CONTACTKEY").AsInteger
                  saldo = ibsqlTempDebt.FieldByName("USR$SALDO").AsCurrency
                  saldo_credit = ibsqlTempDebt.FieldByName("USR$SALDO_CREDIT").AsCurrency
                  saldo_debt =  ibsqlTempDebt.FieldByName("USR$SALDO_DEBT").AsCurrency
                  dayleft = ibsqlTempDebt.FieldByName("USR$DAYLEFT").AsInteger
                  datedebt = ibsqlTempDebt.FieldByName("USR$DATEDEBT").AsDateTime
                  userkey = ibsql.FieldByName("contactkey").AsInteger
                  contrdate = ibsqlTempDebt.FieldByName("usr$contrdate").AsDateTime
                  contrnumber = ibsqlTempDebt.FieldByName("usr$contrnumber").AsString
                  set ibsqlGetID = Creator.GetObject(NULL, "TIBSQL", "")
                  ibsqlGetID.Transaction = Transaction
                  ibsqlGetID.SQL.Text = "SELECT GEN_ID(USR$GDMN_DEBT, 1) FROM RDB$DATABASE"
                  ibsqlGetID.Close
                  ibsqlGetID.ExecQuery
                  ID = ibsqlGetID.Fields(0).AsInteger
                  ibsqlInsert.Close
                  ibsqlInsert.ParamByName("id").AsInteger = ID
                  ibsqlInsert.ParamByName("userkey").AsInteger = userkey
                  ibsqlInsert.ParamByName("contactkey").AsInteger = contactkey
                  ibsqlInsert.ParamByName("saldo").AsCurrency = saldo
                  ibsqlInsert.ParamByName("saldo_credit").AsCurrency = saldo_credit
                  ibsqlInsert.ParamByName("saldo_debt").AsCurrency = saldo_debt
                  ibsqlInsert.ParamByName("datedebt").AsDateTime = datedebt
                  ibsqlInsert.ParamByName("dayleft").AsInteger = dayleft
                  ibsqlInsert.ParamByName("contrdate").AsDateTime = contrdate
                  ibsqlInsert.ParamByName("contrnumber").AsString = contrnumber
                  ibsqlInsert.ExecQuery
                  ibsqlTempDebt.Next
                wend
              end if
              ibsql.Next
            wend
          end if
          if Transaction.InTransaction then
            Transaction.Commit
          end if
        End Function
        sub web_AutoCreateDebt_Agents_Rollback(Transaction)
           if Transaction.InTransaction then
            Transaction.Rollback
          end if
        end sub
        
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 472928411_1549072347
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      NAME: "web_CreateOrder"
      COMMENT: ~
      EVENT: ~
      FUNCTIONTYPE: ~
      GROUPNAME: ~
      INHERITEDRULE: 0
      LANGUAGE: "VBScript"
      LOCALNAME: ~
      MODIFYDATE: ~
      MODULE: "UNKNOWN"
      MODULECODE: "1010001_17 APPLICATION"
      OBJECTNAME: "APPLICATION"
      OWNERNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      USEDEBUGINFO: 0
      EDITIONDATE: 2021-11-26T18:59:47+03:00
      DISPLAYSCRIPT: | 
        WEB_CREATEORDER
        WEB_CREATEORDER_ROLLBACK
        FINALIZATION
        
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QJAAAATVNHUEFSQU1TCQAAAE1TR1BBUkFNUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABGTlNUUFJTVAcAAABVU0VSS0VZBwAAAFVTRVJLRVkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        Rk5TVEZMUFI=
      SCRIPT: | 
        Option Explicit
        Function web_CreateOrder(msgParams, userkey)
          dim headcompanykey, documentdate, contactkey, roadkey, globalgroup, ondate, tovaroved
          dim Creator, ibsql, departkey, isSklad, errorMessage, takenOrder, Transaction
          dim otherHead, typeError, Results1
          errorMessage = ""
          otherHead = ""
          typeError = 0
          roadkey = gdcBaseManager.GetIDByRUIDString("713842150_1871619887")
           'объект для работы с типами данных
          dim Enc
          set Enc = new TVB_xml_EncodingFunctions
        
          documentdate = Enc.DecodeDate(msgParams.SimpleValue("documentDate", ""))
          if Assigned(msgParams.Value("head").Value("contact")) then
            headcompanykey = CDbl(msgParams.Value("head").Value("contact").SimpleValue("id", ""))
          else
            headcompanykey = null
          end if
        
          if Assigned(msgParams.Value("head").Value("outlet")) then
            contactkey = CDbl(msgParams.Value("head").Value("outlet").SimpleValue("id", ""))
          else
            contactkey = null
          end if
        
          ondate = Enc.DecodeDate(msgParams.Value("head").SimpleValue("onDate", ""))
        
          if  Assigned(msgParams.Value("head").Value("depart")) then
            departkey = CDbl(msgParams.Value("head").Value("depart").SimpleValue("id", ""))
          else
            departkey = null
          end if
        
        
          set Creator = new TCreator
          set ibsql = Creator.GetObject(nil,"TIBSQL","")
          ibsql.Transaction = gdcBaseManager.ReadTransaction
        
          ibsql.Close
          ibsql.SQL.Text = _
            "select u.USR$CONTACTKEY " & _
            "from USR$GDMN_USERS u " & _
            "where u.USR$MOBILEID = :userkey "
          ibsql.ParamByName("userkey").AsVariant = userkey
          ibsql.ExecQuery
          if ibsql.RecordCount > 0  then
            tovaroved = ibsql.FieldByName("USR$CONTACTKEY").AsInteger
          else
            tovaroved = IBLogin.Contactkey
          end if
          dim ibsqlSaldo
          set ibsqlSaldo = Creator.GetObject(nil, "TIBSQL", "")
          ibsqlSaldo.Transaction = gdcBaseManager.ReadTransaction
        
          ibsql.Close
          ibsql.SQL.Text = _
            "select b.id " & _
            "from USR$VMK_GLOBALGROUP b " & _
            "where b.USR$SKLAD = :departkey "
          ibsql.ParamByName("departkey").AsVariant = departkey
          ibsql.ExecQuery
          if ibsql.RecordCount > 0  then
            globalgroup = ibsql.FieldByName("id").AsInteger
            isSklad = 1
          else
            globalgroup = null
            isSklad = 0
          end if
          'Проверка на время отгрузки
          dim check, delt
          ibsql.Close
          ibsql.SQL.Text = _
            "select first(1) CAST(constvalue as INTEGER) as ok from gd_constvalue " & _
            " where constkey = " & gdcBaseManager.GetIDByRUIDString("929573997_991893850")
          ibsql.ExecQuery
          if ibsql.RecordCount > 0 then
            check = ibsql.FieldByName("ok").AsInteger
          else
            check = 0
          end if
          if (check <> 0) then
            ibsql.Close
            ibsql.SQL.Text = _
              "select (current_time  - CAST('16:00:00' AS time))  as delt  from rdb$database "
            ibsql.ExecQuery
            delt = ibsql.FieldByName("delt").AsCurrency
            if (delt > 0) then
              if (ondate <= (date + 1))  then
                errorMessage = errorMessage &  " после 4 часов!!! "
                typeError = 1
              end if
            end if
          end if
          dim ibsqlContract
          set ibsqlContract = Creator.GetObject(nil, "TIBSQL", "")
          ibsqlContract.Transaction = gdcBaseManager.ReadTransaction
          ibsqlContract.SQL.Text = _
            "SELECT FIRST(1) doc.id, doc.number, doc.documentdate, paycond.USR$NAME, v.USR$PAYCONDKEY, " & _
            " coalesce(v.USR$LIMITSUM, 0) as USR$LIMITSUM,  coalesce(v.USR$NOTLIMIT, 0) as USR$NOTLIMIT " & _
            " from USR$INV_CONTRACT v JOIN gd_document doc ON v.documentkey = doc.id " & _
            "   left JOIN GD_V_COMPANY cf ON doc.companykey = cf.id " & _
            "   LEFT JOIN USR$INV_PAYCOND PAYCOND ON PAYCOND.ID  =  v.USR$PAYCONDKEY " & _
            " WHERE v.usr$contactkey = :COMPANYKEY " & _
            "   and v.USR$VMK_TYPECONTRACT is null " & _
            "   and (v.USR$DATEEND >= current_date or v.USR$DATEEND is null) and doc.documentdate <= current_date " & _
            " ORDER BY doc.documentdate DESC "
          ibsqlContract.Close
          ibsqlContract.ParamByName("COMPANYKEY").AsVariant = headcompanykey
          ibsqlContract.ExecQuery
          ' Если условие оплаты- предоплата - смотрим задолженность
          ' При отсутсвии денег - запрещаем принимать заявку
          ' в других случаях запрещаем принимать если задолженость больше лимита либо больше 60 дней
          if ibsqlContract.EOF then
            errorMessage = errorMessage & " нет действующего договора "
            typeError = 1
          else
            if ibsqlContract.FieldByName("USR$NOTLIMIT").AsInteger <> 1 then
              if ibsqlContract.FieldByName("USR$PAYCONDKEY").AsInteger = gdcBaseManager.GetIDByRUIDString("147035240_1332906934") then
                 call gdcBaseManager.ExecSingleQueryResult("SELECT d.USR$SALDO FROM USR$GDMN_DEBT d " & _
                   " where d.USR$CONTACTKEY = :contactkey ",  _
                 Array(headcompanykey), _
                 Results1, gdcBaseManager.ReadTransaction)
                 if not isEmpty(Results1) then
                   if not isNull(Results1(0, 0)) then
                     if Results1(0, 0) >= 0 then
                       errorMessage = errorMessage & " нет предоплаты "
                       typeError = 1
                     end if
                   end if
                 end if
              else
                ibsqlSaldo.Close
                ibsqlSaldo.SQL.Text = _
                  "select d.USR$DAYLEFT as dayleft, d.USR$SALDO as saldo, d.USR$SALDO_CREDIT, d.USR$SALDO_DEBT " & _
                  "from USR$GDMN_DEBT d " & _
                  "where d.USR$CONTACTKEY = :customerkey "
                ibsqlSaldo.ParamByName("customerkey").AsVariant =  headcompanykey
                ibsqlSaldo.ExecQuery
        
                if ibsqlSaldo.RecordCount > 0 then
                   if ibsqlContract.FieldByName("USR$LIMITSUM").AsCurrency > 0 then
                      if (ibsqlSaldo.FieldByName("saldo").AsCurrency > ibsqlContract.FieldByName("USR$LIMITSUM").AsCurrency) then
                        'Заявка не может быта  принята - у вас задолженность превышает лимит!!!
                         errorMessage = errorMessage & " задолженность превышает лимит "
                         typeError = 1
                      end if
                   end if
                   if ibsqlSaldo.FieldByName("dayleft").Asinteger > 30 then
                     'Заявка не может быта  принята - у вас задолженность  больше 30 дней!!!
                     errorMessage = errorMessage & " задолженность  больше 30 дней "
                     typeError = 1
                   end if
                end if
              end if
            end if
          end if
        
          'Если нет ограничений, создаем заявку, если нет - не создаем завку и отправляем ошибку
          if errorMessage  = "" then
            set Transaction = Creator.GetObject(Null, "TIBTransaction", "Transaction")
            Transaction.Params.Add("nowait")
            Transaction.DefaultDatabase = gdcBaseManager.Database
            Transaction.StartTransaction
            except web_CreateOrder_RollBack(Transaction)
            dim gdcObject
            set gdcObject = Creator.GetObject(nil, "TgdcUserDocument", "")
            gdcObject.SubType = "195454846_468602752"
            gdcObject.Transaction = Transaction
            gdcObject.Open
        
            dim Master
            set Master = Creator.GetObject(nil, "TDataSource", "")
            Master.DataSet = gdcObject
        
            dim gdcDetail, countList, k, q, goodkey, packagekey
            set gdcDetail = Creator.GetObject(nil, "TgdcUserDocumentLine", "")
            gdcDetail.SubType = "195454846_468602752"
            gdcDetail.DetailField = "parent"
            gdcDetail.MasterField = "id"
            gdcDetail.MasterSource = Master
            gdcDetail.SubSet = "ByParent"
            gdcDetail.Transaction = gdcObject.Transaction
            gdcDetail.Open
            on error resume next
            gdcObject.Insert
            gdcObject.FieldByName("DOCUMENTDATE").AsDateTime = documentdate
            gdcObject.FieldByName("USR$ONDATE").AsDateTime = ondate
            gdcObject.FieldByName("USR$VBPF_BILLDATE").AsDateTime = ondate
            gdcObject.FieldByName("USR$HEADCOMPANYKEY").AsVariant = headcompanykey
            gdcObject.FieldByName("USR$CONTACTKEY").AsVariant = contactkey
            gdcObject.FieldByName("USR$ROADKEY").AsVariant =  roadkey
            gdcObject.FieldByName("USR$GLOBALGROUP").AsVariant =  globalgroup
            gdcObject.FieldByName("USR$ISSKLAD").AsVariant = isSklad
            gdcObject.FieldByName("usr$tovaroved").AsInteger = tovaroved
            gdcObject.Post
            if Err.Number <> 0 then
              typeError = 2
              errorMessage = " Ошибка при создании шапки документа Заявка"
              web_CreateOrder = finalization(errorMessage, typeError, otherHead)
              if Transaction.InTransaction then
                Transaction.RollBack
              end if
              exit function
            end if
        
            dim objLines
            set objLines = msgParams.Value("lines")
             'кол-во записей
            countList = objLines.ObjectItemsCount
            for k = 0 to countList - 1
              q = Replace(objLines.ObjectItem(k).simpleValue("quantity", 0), ".", Application.DecimalSeparatorSys)
              if  Assigned(objLines.ObjectItem(k).Value("good")) then
                goodkey = CDbl(objLines.ObjectItem(k).Value("good").simpleValue("id", ""))
                if  Assigned(objLines.ObjectItem(k).Value("packagekey")) then
                  packagekey = CDbl(objLines.ObjectItem(k).Value("packagekey").simpleValue("id", ""))
                else
                  packagekey = 0
                end if
                if q > 0 then
                  ibsql.Close
                  ibsql.SQL.Text = _
                    " SELECT first(1) coalesce(good_v.scale, 1) as scale " & _
                    " FROM gd_goodvalue good_v " & _
                    " LEFT JOIN gd_value v ON good_v.valuekey = v.id " & _
                    " WHERE good_v.goodkey = :goodkey and v.ispack = 1 "
                  ibsql.ParamByName("goodkey").AsVariant = goodkey
                  ibsql.ExecQuery
                  if ibsql.recordCount > 0 then
                    q = q * ibsql.FieldByName("scale").AsCurrency
                  end if
                  on error resume next
                  gdcDetail.Insert
                  gdcDetail.FieldByName("USR$GOODKEY").AsInteger = goodkey
                  gdcDetail.FieldByName("USR$QUANTITY").AsVariant = q
                  if packagekey > 0  then
                    gdcDetail.FieldByName("USR$PACKAGETYPE").AsVariant = packagekey
                  end if
                  gdcDetail.Post
        
                  if Err.Number <> 0 then
                    typeError = 2
                    errorMessage = " Ошибка при создании позиций документа Заявка"
                    web_CreateOrder = finalization(errorMessage, typeError, otherHead)
                    if Transaction.InTransaction then
                      Transaction.RollBack
                    end if
                    exit function
                  end if
                  on error goto 0
                end if
              end if
            next
        
            if Transaction.InTransaction then
              Transaction.Commit
            else
              Transaction.RollBack
            end if
          end if
          web_CreateOrder = finalization(errorMessage, typeError, otherHead)
        
        End Function
        
        sub  web_CreateOrder_RollBack(Transaction)
          if Transaction.InTransaction then
            Transaction.RollBack
            errorMessage = "Ошибка создания документа"
            typeError = 2
            web_CreateOrder = finalization(errorMessage, typeError, otherHead)
          end if
        end sub
        
        function finalization(errorMessage, typeError, otherHead)
          dim a(2)
          a(0) = errorMessage
          a(1) = typeError
          a(2) = otherHead
          finalization = a
        end function
        
  - 
    Properties: 
      Class: "TgdcExplorer"
      RUID: 147023982_1677413867
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      PARENT: "1176267675_1457844439 Исследователь\\Мобильное приложение (WS)"
      NAME: "05. Сформировать дебиторские задолженности"
      CLASSNAME: ~
      CMD: "240641859_1971205439"
      CMDTYPE: 1
      HOTKEY: ~
      IMGINDEX: 0
      ORDR: ~
      SUBTYPE: ~
      EDITIONDATE: 2022-10-14T15:00:07+03:00
      DISABLED: 0
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147030938_1730903579
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      NAME: "web_getRouters"
      COMMENT: ~
      EVENT: ~
      FUNCTIONTYPE: ~
      GROUPNAME: ~
      INHERITEDRULE: 0
      LANGUAGE: "VBScript"
      LOCALNAME: ~
      MODIFYDATE: ~
      MODULE: "UNKNOWN"
      MODULECODE: "1010001_17 APPLICATION"
      OBJECTNAME: "APPLICATION"
      OWNERNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      USEDEBUGINFO: 0
      EDITIONDATE: 2022-06-20T16:29:19+03:00
      DISPLAYSCRIPT: | 
        WEB_GETROUTERS
        
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QJAAAAREFURUJFR0lOCQAAAERBVEVCRUdJTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABGTlNUUFJTVAcAAABEQVRFRU5EBwAAAERBVEVFTkQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        Rk5TVFBSU1QHAAAAVkVSU0lPTgcAAABWRVJTSU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZO
        U1RQUlNUCgAAAENPTlRBQ1RLRVkKAAAAQ09OVEFDVEtFWQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABGTlNUUFJTVAsAAABUUkFOU0FDVElPTgsAAABUUkFOU0FDVElPTgAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAABGTlNURkxQUg==
      SCRIPT: | 
        '#include web_formatDate
        '#include web_cur_replace
        '#include web_JSonString
        Option Explicit
        Function web_getRouters(dateBegin, dateEnd, version, contactkey, transaction)
        web_getRouters = false
          dim Json
          dim ibsql, Creator, ibsqlPos, documenttypeAlias
          set Creator = new TCreator
          set Json = Creator.GetObject(nil, "TStringList", "")
          set ibsql =  Creator.GetObject(nil,"TIBSQL","")
          ibsql.Transaction = Transaction
          ibsql.SQL.Text = _
            "SELECT " & _
            "  doc.DOCUMENTDATE, " & _
            "  doc.id, " & _
            "  doc.NUMBER, " & _
            "  dt.id as documenttypeKey, " & _
            "  dt.name as documenttypeName, " & _
            "  gdoc.USR$MOBILEALIAS as documenttypeAlias, " & _
            "  agent.ID as agentKey, " & _
            "  agent.name as agentName " & _
            "FROM " & _
            "  USR$ROUTERS b " & _
            "  join gd_document doc on doc.ID = b.DOCUMENTKEY " & _
            "  left join gd_documenttype dt on dt.ID = doc.DOCUMENTTYPEKEY " & _
            "  left join USR$GDMN_DOCUMENTS gdoc on gdoc.USR$DOCUMENTTYPE = dt.ID " & _
            "    and gdoc.USR$VERSION = :ver " & _
            "  left join gd_contact agent on agent.ID = b.USR$AGENT " & _
            "WHERE " & _
            "  coalesce(b.USR$ISREADY, 0)  = 1 " & _
            "  and doc.DOCUMENTDATE >= :datebegin " & _
            "  and doc.DOCUMENTDATE <= :dateend " & _
            "  and doc.DOCUMENTTYPEKEY = :dt " & _
            "  and agent.ID = :contactkey " & _
            "ORDER BY 1 "
          ibsql.ParamByName("ver").AsInteger = version
          ibsql.ParamByName("contactkey").AsInteger = contactkey
          ibsql.ParamByName("datebegin").AsDateTime = datebegin
          ibsql.ParamByName("dateend").AsDateTime = dateend + 7
          ibsql.ParamByName("dt").AsInteger =  gdcBaseManager.GetIDByRUIDString("147019291_1677413867")
          ibsql.ExecQuery
          set ibsqlPos = Creator.GetObject(nil,"TIBSQL","")
          ibsqlPos.Transaction = Transaction
          ibsqlPos.SQL.Text = _
            "select " & _
            "  bl.DOCUMENTKEY as id, " & _
            "  bl.USR$ORDNUMBER, " & _
            "  coalesce(bl.USR$ISVISITED, 0) as USR$ISVISITED, " & _
            "  outlet.ID as outletKey, " & _
            "  outlet.NAME  as outletName " & _
            "from   USR$ROUTERSLINE bl " & _
            "  left join gd_contact outlet on outlet.ID = bl.USR$OUTLET " & _
            "where bl.MASTERKEY = :masterkey " & _
            "order by 2 "
          dim id, number, documentdate, documenttypeName, status, documenttypekey
        
          while not ibsql.EOF
            id = ibsql.FieldByName("id").AsString
            number = ibsql.FieldByName("number").AsString
            documentdate = web_formatDate(ibsql.FieldByName("DOCUMENTDATE").AsDateTime)
            documenttypeKey = ibsql.FieldByName("documenttypeKey").AsString
            documenttypeName = ibsql.FieldByName("documenttypeName").AsString
            documenttypeAlias = ibsql.FieldByName("documenttypeAlias").AsString
            status = "DRAFT"
            Json.Add ( _
             "{" & _
              """id"":""" & id & ""","  & _
              """number"":""" & number & """," & _
              """documentDate"":""" & documentdate & """," & _
              """documentType"":" & _
              "{""id"":""" & documenttypeKey & """," & _
              """name"":""" & documenttypeAlias & """," & _
              """description"":""" & documenttypeName & """}," & _
              """status"":""" & status & """, ")
            Json.Add ("""head"":{")
            Json.Add ( _
              """agent"": { " & _
              """id"":""" & ibsql.FieldByName("agentKey").AsString & """," & _
              """name"":" & web_JSonString(ibsql.FieldByName("agentName").AsString) & _
              "}"  )
            Json.Add ("},")
            'Позиции
            ibsqlPos.Close
            ibsqlPos.ParamByName("masterkey").AsInteger = ibsql.FieldByName("id").AsString
            ibsqlPos.ExecQuery
            Json.Add ("""lines"":[")
            dim visited
            while not ibsqlPos.EOF
            if ibsqlPos.FieldByName("USR$ISVISITED").AsInteger = 1 then
              visited = """visited"": true, "
            else
              visited = """visited"": false, "
            end if
              Json.Add ("{" & _
                """id"":""" & ibsqlPos.FieldByName("id").AsString & ""","  & _
                """ordNumber"":" & ibsqlPos.FieldByName("USR$ORDNUMBER").AsString & ","  & _
                visited & _
                """outlet"":" & _
                "{""id"":" & web_JSonString(ibsqlPos.FieldByName("outletKey").AsString) & "," & _
                """name"":" & web_JSonString(ibsqlPos.FieldByName("outletName").AsString) & "}" )
              ibsqlPos.Next
              if not ibsqlPos.EOF then
                Json.Add ("},")
              else
                Json.Add ("}")
              end if
            wend
            Json.Add ("]")
            ibsql.Next
            if not ibsql.EOF then
               Json.Add ("},")
            else
               Json.Add ("}")
            end if
          wend
         ' 'Пока для формирования файла, потом убрать
        '  Dim fs, f, LocalPath, JSONFileName
        '  LocalPath = "c:\d\"
        '  JSONFileName = "request.json"
        '  Set fs = CreateObject("Scripting.FileSystemObject")
        '  Set f = fs.CreateTextFile(LocalPath & JSONFileName, True)
        '  f.Write Json.Text
        '  f.Close
          web_getRouters = Json.text
          Json.Clear
          if Assigned(Json) then
            Creator.DestroyObject(Json)
          end if
        End Function
        
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147040220_1730903579 web_formatDate"
          - 
            ADDFUNCTIONKEY: "147040222_1730903579 web_cur_replace"
          - 
            ADDFUNCTIONKEY: "147040221_1730903579 web_JSonString"
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 1367204477_1682613733
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      NAME: "web_CreateReturn"
      COMMENT: ~
      EVENT: ~
      FUNCTIONTYPE: ~
      GROUPNAME: ~
      INHERITEDRULE: 0
      LANGUAGE: "VBScript"
      LOCALNAME: ~
      MODIFYDATE: ~
      MODULE: "UNKNOWN"
      MODULECODE: "1010001_17 APPLICATION"
      OBJECTNAME: "APPLICATION"
      OWNERNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      USEDEBUGINFO: 0
      EDITIONDATE: 2021-11-10T13:21:29+03:00
      DISPLAYSCRIPT: | 
        WEB_CREATERETURN
        WEB_CREATERETURN_ROLLBACK
        FINALIZATIONRET
        
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QJAAAATVNHUEFSQU1TCQAAAE1TR1BBUkFNUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABGTlNUUFJTVAcAAABVU0VSS0VZBwAAAFVTRVJLRVkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        Rk5TVEZMUFI=
      SCRIPT: | 
        Option Explicit
        Function web_CreateReturn(msgParams, userkey)
          dim headcompanykey, documentdate, contactkey
          dim Creator, ibsql, departkey, isSklad, errorMessage, takenOrder, Transaction
          dim otherHead, typeError
          errorMessage = ""
          otherHead = ""
          typeError = 0
           'объект для работы с типами данных
          dim Enc
          set Enc = new TVB_xml_EncodingFunctions
        
          documentdate = Enc.DecodeDate(msgParams.SimpleValue("documentDate", ""))
          if Assigned(msgParams.Value("head").Value("contact")) then
            headcompanykey = CDbl(msgParams.Value("head").Value("contact").SimpleValue("id", ""))
          else
            headcompanykey = 0
          end if
        
          if Assigned(msgParams.Value("head").Value("outlet")) then
            contactkey = CDbl(msgParams.Value("head").Value("outlet").SimpleValue("id", ""))
          else
            contactkey = 0
          end if
          set Creator = new TCreator
          set Transaction = Creator.GetObject(Null, "TIBTransaction", "Transaction")
          Transaction.Params.Add("nowait")
          Transaction.DefaultDatabase = gdcBaseManager.Database
          Transaction.StartTransaction
          except web_CreateReturn_RollBack(Transaction)
          dim gdcObject
          set gdcObject = Creator.GetObject(nil, "TgdcInvDocument", "")
          gdcObject.SubType = "171881066_242962778"
          gdcObject.Transaction = Transaction
          gdcObject.ExtraConditions.Clear
          gdcObject.ExtraConditions.Add("Z.DOCUMENTDATE = '" & documentdate & "'")
          gdcObject.Open
        
          dim Master
          set Master = Creator.GetObject(nil, "TDataSource", "")
          Master.DataSet = gdcObject
        
          dim gdcDetail, countList, k, q, goodkey, packagekey
          set gdcDetail = Creator.GetObject(nil, "TgdcInvDocumentLine", "")
          gdcDetail.SubType = "171881066_242962778"
          gdcDetail.DetailField = "parent"
          gdcDetail.MasterField = "id"
          gdcDetail.MasterSource = Master
          gdcDetail.SubSet = "ByParent"
          gdcDetail.Transaction = gdcObject.Transaction
          gdcDetail.Open
          dim objLines, baseDocument
          set objLines = msgParams.Value("lines")
           'кол-во записей
          countList = objLines.ObjectItemsCount
          baseDocument = 0
          set ibsql = Creator.GetObject(nil,"TIBSQL","")
          ibsql.Transaction = gdcBaseManager.ReadTransaction
        
          ibsql.SQL.Text = _
            "select " & _
            "  b.USR$MAINDEPOTKEY, " & _
            "  b.USR$BER_CONTRACT, " & _
            "  doc.DOCUMENTDATE " & _
            "from USR$INV_SELLBILL b " & _
            "  left join gd_document doc on doc.ID = b.DOCUMENTKEY " & _
            "where b.DOCUMENTKEY = :masterkey "
        
          if headcompanykey <> 0 and contactkey <> 0 then
            for k = 0 to countList - 1
              if Assigned(objLines.ObjectItem(k).Value("sellBillId")) then
                baseDocument = CDbl(objLines.ObjectItem(k).SimpleValue("sellBillId", ""))
                'шапка, если еще не создана для этой базовой
                if not gdcObject.Locate("USR$BER_FROMDOCUMENT;USR$VBPF_DEPARTMENTKEY;DOCUMENTDATE;DELAYED", _
                  Array(baseDocument, contactkey, documentdate, 1), "") then
                  ibsql.Close
                  ibsql.ParamByName("masterkey").AsVariant = baseDocument
                  ibsql.ExecQuery
                  if ibsql.RecordCount > 0 then
                    on error resume next
                    gdcObject.Insert
                    gdcObject.FieldByName("NUMBER").AsVariant = "акт"
                    gdcObject.FieldByName("DOCUMENTDATE").AsDateTime = documentdate
                    gdcObject.FieldByName("USR$CONTACTKEY").AsVariant = headcompanykey
                    gdcObject.FieldByName("USR$VBPF_DEPARTMENTKEY").AsVariant = contactkey
                    gdcObject.FieldByName("USR$BER_FROMDOCUMENT").AsVariant = baseDocument
                    gdcObject.FieldByName("USR$DEPTKEY").AsVariant =  ibsql.FieldByName("USR$MAINDEPOTKEY").AsVariant
                    gdcObject.FieldByName("USR$VBPF_CONTRACTKEY").AsVariant = ibsql.FieldByName("USR$BER_CONTRACT").AsVariant
                    ' Возврат 1601086425_1320926323
                    gdcObject.FieldByName("USR$DESCRIPTIONKEY").AsInteger = gdcBaseManager.GetIDByRUIDString("1601086425_1320926323")
                    ' Товарно-транспортная накладная (ПЭВМ) кн. 147520692_534595192
                   ' gdcObject.FieldByName("USR$BLANKCODE").AsInteger = gdcBaseManager.GetIDByRUIDString("147520692_534595192")
                    gdcObject.FieldByName("DELAYED").AsInteger = 1
                    gdcObject.Post
                    if Err.Number <> 0 then
                      typeError = 2
                      errorMessage = " Ошибка при создании шапки документа Возврат ГП"
                      web_CreateReturn = finalizationRet(errorMessage, typeError, otherHead)
                      if Transaction.InTransaction then
                        Transaction.RollBack
                      end if
                      exit function
                    end if
                  else
                    typeError = 2
                    errorMessage = " Базовая накладная не найдена"
                    web_CreateReturn = finalizationRet(errorMessage, typeError, otherHead)
                    if Transaction.InTransaction then
                      Transaction.RollBack
                    end if
                    exit function
                  end if
                end if
                dim costncu
                'позиции  TO_USR$INV_COSTNCU
                q = Replace(objLines.ObjectItem(k).simpleValue("quantity", 0), ".", Application.DecimalSeparatorSys)
                if  Assigned(objLines.ObjectItem(k).Value("good")) then
                  goodkey = CDbl(objLines.ObjectItem(k).Value("good").simpleValue("id", ""))
                  if  Assigned(objLines.ObjectItem(k).Value("priceFromSellBill")) then
                    costncu = CDbl(objLines.ObjectItem(k).simpleValue("priceFromSellBill", ""))
                  else
                    costncu = 0
                  end if
                  if q > 0 then
                    on error resume next
                    gdcDetail.Insert
                    gdcDetail.FieldByName("GOODKEY").AsInteger = goodkey
                    gdcDetail.FieldByName("QUANTITY").AsVariant = q
                    if costncu > 0  then
                      gdcDetail.FieldByName("TO_USR$INV_COSTNCU").AsVariant = costncu
                    end if
                    gdcDetail.Post
                    if Err.Number <> 0 then
                      typeError = 2
                      errorMessage = " Ошибка при создании позиций документа Возврат ГП"
                      web_CreateReturn = finalizationRet(errorMessage, typeError, otherHead)
                      if Transaction.InTransaction then
                        Transaction.RollBack
                      end if
                      exit function
                    end if
                    on error goto 0
                  end if
                end if
              end if
            next
          end if
        
          if Transaction.InTransaction then
            Transaction.Commit
          else
            Transaction.RollBack
          end if
        
          web_CreateReturn = finalizationRet(errorMessage, typeError, otherHead)
        End Function
        
        sub  web_CreateReturn_RollBack(Transaction)
          if Transaction.InTransaction then
            Transaction.RollBack
            errorMessage = "Ошибка создания документа"
            typeError = 2
            web_CreateReturn = finalizationRet(errorMessage, typeError, otherHead)
          end if
        end sub
        
        function finalizationRet(errorMessage, typeError, otherHead)
          dim a(2)
          a(0) = errorMessage
          a(1) = typeError
          a(2) = otherHead
          finalizationRet = a
        end function
        
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 174583134_1693379973
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      NAME: "web_callAutoGetMessageFromServer"
      COMMENT: ~
      EVENT: ~
      FUNCTIONTYPE: ~
      GROUPNAME: ~
      INHERITEDRULE: 0
      LANGUAGE: "VBScript"
      LOCALNAME: ~
      MODIFYDATE: ~
      MODULE: "UNKNOWN"
      MODULECODE: "1010001_17 APPLICATION"
      OBJECTNAME: "APPLICATION"
      OWNERNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      USEDEBUGINFO: 0
      EDITIONDATE: 2023-01-05T14:09:34+03:00
      DISPLAYSCRIPT: | 
        WEB_CALLAUTOGETMESSAGEFROMSERVER
        
      ENTEREDPARAMS: ~
      SCRIPT: | 
        Option Explicit
        Function web_callAutoGetMessageFromServer
          ' AppSystem - подсистема, для которой делается автозадача
          dim AppSystem
          AppSystem = gdcBaseManager.GetIDByRUIDString("472927658_1549072347")
          set web_service = (New TVB_Web_Service)(AppSystem)
          dim Creator, ibsql, functionkey, FuncParamArray, flag, period, web_service
          on error resume next
          flag = true
          period = time
          set Creator = new TCreator
          set ibsql = Creator.GetObject(nil, "TIBSQL", "")
          ibsql.Transaction = gdcBaseManager.ReadTransaction
          ibsql.SQL.Text = _
            "SELECT " & _
            "  v.USR$MESSAGEFROMSERVER " & _
            "FROM " & _
            "  USR$GDMN_SYSTEMS b " & _
            "  LEFT JOIN USR$GDMN_VERSIONS v  ON v.ID = b.USR$GDMN_VERSION " & _
            "WHERE b.ID = :systemkey "
          ibsql.ParamByName("systemkey").AsVariant = AppSystem
          ibsql.ExecQuery
          if ibsql.RecordCount > 0 then
            functionkey = ibsql.FieldByName("USR$MESSAGEFROMSERVER").AsInteger
          else
            functionkey = 0
          end if
          if functionkey > 0  then
            FuncParamArray = Array(true, AppSystem, web_service)
            while (flag) and (dateDiff("s", period, time) <= 600)
              flag = System.ExecuteScriptFunction(functionkey, FuncParamArray)
            wend
          end if
          if err.Number <> 0 then
             hasError = true
             AError = "Ошибка в автозадаче! " & err.Description
            exit function
          end if
        End Function
        
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147117340_1730903579
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      NAME: "web_CreateOrder2_0_0"
      COMMENT: ~
      EVENT: ~
      FUNCTIONTYPE: ~
      GROUPNAME: ~
      INHERITEDRULE: 0
      LANGUAGE: "VBScript"
      LOCALNAME: ~
      MODIFYDATE: ~
      MODULE: "UNKNOWN"
      MODULECODE: "1010001_17 APPLICATION"
      OBJECTNAME: "APPLICATION"
      OWNERNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      USEDEBUGINFO: 0
      EDITIONDATE: 2022-12-19T19:11:10+03:00
      DISPLAYSCRIPT: | 
        WEB_CREATEORDER2_0_0
        FINALIZATION2_0_0
        CREATELOG
        WEB_CREATELOG_ROLLBACK
        
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QJAAAATVNHUEFSQU1TCQAAAE1TR1BBUkFNUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABGTlNUUFJTVAcAAABVU0VSS0VZBwAAAFVTRVJLRVkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        Rk5TVFBSU1QLAAAAVFJBTlNBQ1RJT04LAAAAVFJBTlNBQ1RJT04AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAARk5TVEZMUFI=
      SCRIPT: | 
        Option Explicit
        Function web_CreateOrder2_0_0(msgParams, userkey, transaction)
          dim headcompanykey, documentdate, contactkey, roadkey, globalgroup, ondate, tovaroved
          dim Creator, ibsql, departkey, isSklad, errorMessage, takenOrder
          dim otherHead, typeError, Results1, comment, headcompany, contact, mobileId
          errorMessage = ""
          otherHead = ""
          typeError = 0
          roadkey = gdcBaseManager.GetIDByRUIDString("713842150_1871619887")
           'объект для работы с типами данных
          dim Enc
          set Enc = new TVB_xml_EncodingFunctions
        
          documentdate = Enc.DecodeDate(msgParams.SimpleValue("documentDate", ""))
          mobileId = msgParams.SimpleValue("id", "")
          headcompanykey = null
          headcompany = ""
          if Assigned(msgParams.Value("head").Value("contact")) then
            if msgParams.Value("head").Value("contact").ClassName  = "JSonObject" then
              headcompanykey = CDbl(msgParams.Value("head").Value("contact").SimpleValue("id", ""))
              headcompany = msgParams.Value("head").Value("contact").SimpleValue("name", "")
            end if
          end if
          
          contactkey = null
          contact = ""
          if Assigned(msgParams.Value("head").Value("outlet")) then
            if msgParams.Value("head").Value("outlet").ClassName = "JSonObject" then
              contactkey = CDbl(msgParams.Value("head").Value("outlet").SimpleValue("id", ""))
              contact = msgParams.Value("head").Value("outlet").SimpleValue("name", "")
            end if
          end if
        
          ondate = Enc.DecodeDate(msgParams.Value("head").SimpleValue("onDate", ""))
          
          departkey = null
          if  Assigned(msgParams.Value("head").Value("depart")) then
            if msgParams.Value("head").Value("depart").ClassName = "JSonObject" then
              departkey = CDbl(msgParams.Value("head").Value("depart").SimpleValue("id", ""))
            end if
          end if
          comment = msgParams.Value("head").SimpleValue("comment", "")
        
          set Creator = new TCreator
          set ibsql = Creator.GetObject(nil,"TIBSQL","")
          ibsql.Transaction = transaction
        
          ibsql.Close
          ibsql.SQL.Text = _
            "select u.USR$CONTACTKEY " & _
            "from USR$GDMN_USERS u " & _
            "where u.USR$MOBILEID = :userkey "
          ibsql.ParamByName("userkey").AsVariant = userkey
          ibsql.ExecQuery
          if ibsql.RecordCount > 0  then
            tovaroved = ibsql.FieldByName("USR$CONTACTKEY").AsInteger
          else
            tovaroved = IBLogin.Contactkey
          end if
          dim ibsqlSaldo
          set ibsqlSaldo = Creator.GetObject(nil, "TIBSQL", "")
          ibsqlSaldo.Transaction = gdcBaseManager.ReadTransaction
        
          ibsql.Close
          ibsql.SQL.Text = _
            "select b.id " & _
            "from USR$VMK_GLOBALGROUP b " & _
            "where b.USR$SKLAD = :departkey "
          ibsql.ParamByName("departkey").AsVariant = departkey
          ibsql.ExecQuery
          if ibsql.RecordCount > 0  then
            globalgroup = ibsql.FieldByName("id").AsInteger
            isSklad = 1
          else
            globalgroup = null
            isSklad = 0
          end if
          'Проверка на время отгрузки
          dim check, delt
          ibsql.Close
          ibsql.SQL.Text = _
            "select first(1) CAST(constvalue as INTEGER) as ok from gd_constvalue " & _
            " where constkey = " & gdcBaseManager.GetIDByRUIDString("929573997_991893850")
          ibsql.ExecQuery
          if ibsql.RecordCount > 0 then
            check = ibsql.FieldByName("ok").AsInteger
          else
            check = 0
          end if
          if (check <> 0) then
            ibsql.Close
            ibsql.SQL.Text = _
              "select (current_time  - CAST('16:00:00' AS time))  as delt  from rdb$database "
            ibsql.ExecQuery
            delt = ibsql.FieldByName("delt").AsCurrency
            if (delt > 0) then
              if (ondate <= (date + 1))  then
                errorMessage = errorMessage &  " после 4 часов!!! "
                typeError = 1
              end if
            end if
          end if
          dim ibsqlContract
          set ibsqlContract = Creator.GetObject(nil, "TIBSQL", "")
          ibsqlContract.Transaction = gdcBaseManager.ReadTransaction
          ibsqlContract.SQL.Text = _
            "SELECT FIRST(1) doc.id, doc.number, doc.documentdate, paycond.USR$NAME, v.USR$PAYCONDKEY, " & _
            " coalesce(v.USR$LIMITSUM, 0) as USR$LIMITSUM,  coalesce(v.USR$NOTLIMIT, 0) as USR$NOTLIMIT " & _
            " from USR$INV_CONTRACT v JOIN gd_document doc ON v.documentkey = doc.id " & _
            "   left JOIN GD_V_COMPANY cf ON doc.companykey = cf.id " & _
            "   LEFT JOIN USR$INV_PAYCOND PAYCOND ON PAYCOND.ID  =  v.USR$PAYCONDKEY " & _
            " WHERE v.usr$contactkey = :COMPANYKEY " & _
            "   and v.USR$VMK_TYPECONTRACT is null " & _
            "   and (v.USR$DATEEND >= current_date or v.USR$DATEEND is null) and doc.documentdate <= current_date " & _
            " ORDER BY doc.documentdate DESC "
          ibsqlContract.Close
          ibsqlContract.ParamByName("COMPANYKEY").AsVariant = headcompanykey
          ibsqlContract.ExecQuery
          ' Если условие оплаты- предоплата - смотрим задолженность
          ' При отсутсвии денег - запрещаем принимать заявку
          ' в других случаях запрещаем принимать если задолженость больше лимита либо больше 60 дней
          if ibsqlContract.EOF then
            errorMessage = errorMessage & " нет действующего договора "
            typeError = 1
          else
            if ibsqlContract.FieldByName("USR$NOTLIMIT").AsInteger <> 1 then
              if ibsqlContract.FieldByName("USR$PAYCONDKEY").AsInteger = gdcBaseManager.GetIDByRUIDString("147035240_1332906934") then
                 'пока разрешаем без предоплаты
                 'call gdcBaseManager.ExecSingleQueryResult("SELECT d.USR$SALDO_CREDIT FROM USR$GDMN_DEBT d " & _
        '           " where d.USR$CONTACTKEY = :contactkey ",  _
        '         Array(headcompanykey), _
        '         Results1, gdcBaseManager.ReadTransaction)
        '         if not isEmpty(Results1) then
        '           if not isNull(Results1(0, 0)) then
        '             if Results1(0, 0) <= 0 then
        '               errorMessage = errorMessage & " нет предоплаты "
        '               typeError = 1
        '             end if
        '           end if
        '         end if
              else
                ibsqlSaldo.Close
                ibsqlSaldo.SQL.Text = _
                  "select d.USR$DAYLEFT as dayleft, d.USR$SALDO as saldo, d.USR$SALDO_CREDIT, d.USR$SALDO_DEBT " & _
                  "from USR$GDMN_DEBT d " & _
                  "where d.USR$CONTACTKEY = :customerkey "
                ibsqlSaldo.ParamByName("customerkey").AsVariant =  headcompanykey
                ibsqlSaldo.ExecQuery
        
                if ibsqlSaldo.RecordCount > 0 then
                   if ibsqlContract.FieldByName("USR$LIMITSUM").AsCurrency > 0 then
                      if (ibsqlSaldo.FieldByName("saldo").AsCurrency > ibsqlContract.FieldByName("USR$LIMITSUM").AsCurrency) then
                        'Заявка не может быта  принята - у вас задолженность превышает лимит!!!
                         errorMessage = errorMessage & " задолженность превышает лимит "
                         typeError = 1
                      end if
                   end if
                   if ibsqlSaldo.FieldByName("dayleft").Asinteger > 30 then
                     'Заявка не может быта  принята - у вас задолженность  больше 30 дней!!!
                     errorMessage = errorMessage & " задолженность  больше 30 дней "
                     typeError = 1
                   end if
                end if
              end if
            end if
          end if
        
          'Если нет ограничений, создаем заявку, если нет - не создаем заявку и отправляем ошибку
          if errorMessage  = "" then
          '  set Transaction = Creator.GetObject(Null, "TIBTransaction", "Transaction")
        '    Transaction.Params.Add("nowait")
        '    Transaction.DefaultDatabase = gdcBaseManager.Database
        '    Transaction.StartTransaction
          '  except web_CreateOrder2_0_0_RollBack
          ' Проверка на наличие заявки с таким же мобильным ID ( поле DESCRIPTION)
            ibsql.Close
            ibsql.SQL.Text = _
              "select first(1) c.DOCUMENTKEY " & _
              "from usr$ber_claim c " & _
              "  join gd_document doc on doc.ID = c.DOCUMENTKEY " & _
              "where c.USR$ONDATE = :ondate " & _
              "  and c.USR$HEADCOMPANYKEY = :headcompanykey " & _
              "  and c.USR$CONTACTKEY = :contactkey " & _
              "  and doc.DESCRIPTION = :description "
            ibsql.ParamByName("headcompanykey").AsVariant = headcompanykey
            ibsql.ParamByName("contactkey").AsVariant = contactkey
            ibsql.ParamByName("ondate").AsVariant = ondate
            ibsql.ParamByName("description").AsVariant = mobileId
            ibsql.ExecQuery
            if ibsql.RecordCount = 0 then
              dim gdcObject
              set gdcObject = Creator.GetObject(nil, "TgdcUserDocument", "")
              gdcObject.SubType = "195454846_468602752"
              gdcObject.Transaction = Transaction
              gdcObject.Open
        
              dim Master
              set Master = Creator.GetObject(nil, "TDataSource", "")
              Master.DataSet = gdcObject
        
              dim gdcDetail, countList, k, q, goodkey, packagekey
              set gdcDetail = Creator.GetObject(nil, "TgdcUserDocumentLine", "")
              gdcDetail.SubType = "195454846_468602752"
              gdcDetail.DetailField = "parent"
              gdcDetail.MasterField = "id"
              gdcDetail.MasterSource = Master
              gdcDetail.SubSet = "ByParent"
              gdcDetail.Transaction = gdcObject.Transaction
              gdcDetail.Open
              on error resume next
              gdcObject.Insert
              gdcObject.FieldByName("DESCRIPTION").AsVariant =  mobileId
              gdcObject.FieldByName("DOCUMENTDATE").AsDateTime = documentdate
              gdcObject.FieldByName("USR$ONDATE").AsDateTime = ondate
              gdcObject.FieldByName("USR$VBPF_BILLDATE").AsDateTime = ondate
              gdcObject.FieldByName("USR$HEADCOMPANYKEY").AsVariant = headcompanykey
              gdcObject.FieldByName("USR$CONTACTKEY").AsVariant = contactkey
              gdcObject.FieldByName("USR$ROADKEY").AsVariant =  roadkey
              gdcObject.FieldByName("USR$GLOBALGROUP").AsVariant =  globalgroup
              gdcObject.FieldByName("USR$ISSKLAD").AsVariant = isSklad
              gdcObject.FieldByName("usr$tovaroved").AsInteger = tovaroved
              gdcObject.FieldByName("USR$ISWS").AsInteger = 1
              gdcObject.FieldByName("USR$BER_COMMENT").AsVariant = comment
              gdcObject.Post
              if Err.Number <> 0 then
                typeError = 2
                errorMessage = " Ошибка при создании шапки документа Заявка"
                web_CreateOrder2_0_0 = finalization2_0_0(errorMessage, typeError, otherHead)
               ' if Transaction.InTransaction then
          '        Transaction.RollBack
          '      end if
                exit function
              end if
        
              dim objLines
              set objLines = msgParams.Value("lines")
               'кол-во записей
              countList = objLines.ObjectItemsCount
              for k = 0 to countList - 1
                q = Replace(objLines.ObjectItem(k).simpleValue("quantity", 0), ".", Application.DecimalSeparatorSys)
                if  Assigned(objLines.ObjectItem(k).Value("good")) then
                  goodkey = CDbl(objLines.ObjectItem(k).Value("good").simpleValue("id", ""))
                  if  Assigned(objLines.ObjectItem(k).Value("package")) then
                    packagekey = CDbl(objLines.ObjectItem(k).Value("package").simpleValue("id", ""))
                  else
                    packagekey = 0
                  end if
                  if q > 0 then
                    'ibsql.Close
          '          ibsql.SQL.Text = _
          '            " SELECT first(1) coalesce(good_v.scale, 1) as scale " & _
          '            " FROM gd_goodvalue good_v " & _
          '            " LEFT JOIN gd_value v ON good_v.valuekey = v.id " & _
          '            " WHERE good_v.goodkey = :goodkey and v.ispack = 1 "
          '          ibsql.ParamByName("goodkey").AsVariant = goodkey
          '          ibsql.ExecQuery
                   ' if ibsql.recordCount > 0 then
          '            q = q * ibsql.FieldByName("scale").AsCurrency
          '          end if
                    on error resume next
                    gdcDetail.Insert
                    gdcDetail.FieldByName("USR$GOODKEY").AsInteger = goodkey
                    gdcDetail.FieldByName("USR$QUANTITY").AsVariant = q
                    if packagekey > 0  then
                      gdcDetail.FieldByName("USR$PACKAGETYPE").AsVariant = packagekey
                    end if
                    gdcDetail.Post
        
                    if Err.Number <> 0 then
                      typeError = 2
                      errorMessage = " Ошибка при создании позиций документа Заявка"
                      web_CreateOrder2_0_0 = finalization2_0_0(errorMessage, typeError, otherHead)
                     ' if Transaction.InTransaction then
          '              Transaction.RollBack
          '            end if
                      exit function
                    end if
                    on error goto 0
                  end if
                end if
              next
            end if
            'if Transaction.InTransaction then
        '      Transaction.Commit
        '    else
        '      Transaction.RollBack
        '    end if
          end if
          if errorMessage <> "" then
            call createLog(errorMessage, tovaroved, headcompany, contact, ondate)
          end if
          web_CreateOrder2_0_0 = finalization2_0_0(errorMessage, typeError, otherHead)
        
        End Function
        
        function finalization2_0_0(errorMessage, typeError, otherHead)
          dim a(2)
          a(0) = errorMessage
          a(1) = typeError
          a(2) = otherHead
          finalization2_0_0 = a
        end function
        
        function createLog(errorMessage, tovaroved, headcompany, contact, ondate)
          on error resume next
          dim ibsqlInsert, Creator, str, id, Transaction, Res
          set Creator = new TCreator
          set Transaction = Creator.GetObject(Null, "TIBTransaction", "Transaction")
          Transaction.DefaultDatabase = gdcBaseManager.Database
          Transaction.StartTransaction
          except web_createLog_RollBack(Transaction)
          str = errorMessage & ": Дата отгрузки " & ondate & ", " & headcompany & " " & contact
          call gdcBaseManager.ExecSingleQueryResult("select id from GD_P_GETNEXTID ", _
            NULL, Res, Transaction)
          id = Res(0, 0)
          set ibsqlInsert = Creator.GetObject(nil, "TIBSQL", "")
          ibsqlInsert.Transaction = Transaction
          ibsqlInsert.SQL.Text = _
            "insert into USR$GDMN_LOG_ERRORS(ID, USR$CONTACTKEY, USR$ONDATE, USR$DESCRIPTION) " & _
            "values (:ID, :USERKEY, :ONDATE, :DESCRIPTION) "
          ibsqlInsert.Close
          ibsqlInsert.ParamByName("id").AsInteger = id
          ibsqlInsert.ParamByName("USERKEY").AsVariant = tovaroved
          ibsqlInsert.ParamByName("ONDATE").AsDateTime = ondate
          ibsqlInsert.ParamByName("DESCRIPTION").AsVariant = str
          ibsqlInsert.ExecQuery
          Transaction.Commit
          on error goto 0
        end function
        sub  web_createLog_RollBack(transaction)
          if Transaction.InTransaction then
            Transaction.RollBack
          end if
        end sub
        
        
        
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 147117345_1730903579
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      NAME: "web_CreateReturn2_0_0"
      COMMENT: ~
      EVENT: ~
      FUNCTIONTYPE: ~
      GROUPNAME: ~
      INHERITEDRULE: 0
      LANGUAGE: "VBScript"
      LOCALNAME: ~
      MODIFYDATE: ~
      MODULE: "UNKNOWN"
      MODULECODE: "1010001_17 APPLICATION"
      OBJECTNAME: "APPLICATION"
      OWNERNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      USEDEBUGINFO: 0
      EDITIONDATE: 2022-05-27T16:44:19+03:00
      DISPLAYSCRIPT: | 
        WEB_CREATERETURN2_0_0
        FINALIZATIONRET2_0_0
        
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QJAAAATVNHUEFSQU1TCQAAAE1TR1BBUkFNUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABGTlNUUFJTVAcAAABVU0VSS0VZBwAAAFVTRVJLRVkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        Rk5TVFBSU1QLAAAAVFJBTlNBQ1RJT04LAAAAVFJBTlNBQ1RJT04AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAARk5TVEZMUFI=
      SCRIPT: | 
        Option Explicit
        Function web_CreateReturn2_0_0(msgParams, userkey, transaction)
          dim headcompanykey, documentdate, contactkey
          dim Creator, ibsql, departkey, isSklad, errorMessage, takenOrder
          dim otherHead, typeError
          errorMessage = ""
          otherHead = ""
          typeError = 0
           'объект для работы с типами данных
          dim Enc
          set Enc = new TVB_xml_EncodingFunctions
        
          documentdate = Enc.DecodeDate(msgParams.SimpleValue("documentDate", ""))
          if Assigned(msgParams.Value("head").Value("contact")) then
            headcompanykey = CDbl(msgParams.Value("head").Value("contact").SimpleValue("id", ""))
          else
            headcompanykey = 0
          end if
        
          if Assigned(msgParams.Value("head").Value("outlet")) then
            contactkey = CDbl(msgParams.Value("head").Value("outlet").SimpleValue("id", ""))
          else
            contactkey = 0
          end if
          set Creator = new TCreator
         ' set Transaction = Creator.GetObject(Null, "TIBTransaction", "Transaction")
        '  Transaction.Params.Add("nowait")
        '  Transaction.DefaultDatabase = gdcBaseManager.Database
        '  Transaction.StartTransaction
          'except web_CreateReturn2_0_0_RollBack
          dim gdcObject
          set gdcObject = Creator.GetObject(nil, "TgdcInvDocument", "")
          gdcObject.SubType = "171881066_242962778"
          gdcObject.Transaction = Transaction
          gdcObject.ExtraConditions.Clear
          gdcObject.ExtraConditions.Add("Z.DOCUMENTDATE = '" & documentdate & "'")
          gdcObject.Open
        
          dim Master
          set Master = Creator.GetObject(nil, "TDataSource", "")
          Master.DataSet = gdcObject
        
          dim gdcDetail, countList, k, q, goodkey, packagekey
          set gdcDetail = Creator.GetObject(nil, "TgdcInvDocumentLine", "")
          gdcDetail.SubType = "171881066_242962778"
          gdcDetail.DetailField = "parent"
          gdcDetail.MasterField = "id"
          gdcDetail.MasterSource = Master
          gdcDetail.SubSet = "ByParent"
          gdcDetail.Transaction = gdcObject.Transaction
          gdcDetail.Open
          dim objLines, baseDocument
          set objLines = msgParams.Value("lines")
           'кол-во записей
          countList = objLines.ObjectItemsCount
          baseDocument = 0
          set ibsql = Creator.GetObject(nil,"TIBSQL","")
          ibsql.Transaction = gdcBaseManager.ReadTransaction
        
          ibsql.SQL.Text = _
            "select " & _
            "  b.USR$MAINDEPOTKEY, " & _
            "  b.USR$BER_CONTRACT, " & _
            "  doc.DOCUMENTDATE " & _
            "from USR$INV_SELLBILL b " & _
            "  left join gd_document doc on doc.ID = b.DOCUMENTKEY " & _
            "where b.DOCUMENTKEY = :masterkey "
        
          if headcompanykey <> 0 and contactkey <> 0 then
            for k = 0 to countList - 1
              if Assigned(objLines.ObjectItem(k).Value("sellBillId")) then
                baseDocument = CDbl(objLines.ObjectItem(k).SimpleValue("sellBillId", ""))
                'шапка, если еще не создана для этой базовой
                if not gdcObject.Locate("USR$BER_FROMDOCUMENT;USR$VBPF_DEPARTMENTKEY;DOCUMENTDATE;DELAYED", _
                  Array(baseDocument, contactkey, documentdate, 1), "") then
                  ibsql.Close
                  ibsql.ParamByName("masterkey").AsVariant = baseDocument
                  ibsql.ExecQuery
                  if ibsql.RecordCount > 0 then
                    on error resume next
                    gdcObject.Insert
                    gdcObject.FieldByName("NUMBER").AsVariant = "акт"
                    gdcObject.FieldByName("DOCUMENTDATE").AsDateTime = documentdate
                    gdcObject.FieldByName("USR$CONTACTKEY").AsVariant = headcompanykey
                    gdcObject.FieldByName("USR$VBPF_DEPARTMENTKEY").AsVariant = contactkey
                    gdcObject.FieldByName("USR$BER_FROMDOCUMENT").AsVariant = baseDocument
                    gdcObject.FieldByName("USR$DEPTKEY").AsVariant =  ibsql.FieldByName("USR$MAINDEPOTKEY").AsVariant
                    gdcObject.FieldByName("USR$VBPF_CONTRACTKEY").AsVariant = ibsql.FieldByName("USR$BER_CONTRACT").AsVariant
                    ' Возврат 1601086425_1320926323
                    gdcObject.FieldByName("USR$DESCRIPTIONKEY").AsInteger = gdcBaseManager.GetIDByRUIDString("1601086425_1320926323")
                    ' Товарно-транспортная накладная (ПЭВМ) кн. 147520692_534595192
                   ' gdcObject.FieldByName("USR$BLANKCODE").AsInteger = gdcBaseManager.GetIDByRUIDString("147520692_534595192")
                    gdcObject.FieldByName("DELAYED").AsInteger = 1
                    gdcObject.Post
                    if Err.Number <> 0 then
                      typeError = 2
                      errorMessage = " Ошибка при создании шапки документа Возврат ГП"
                      web_CreateReturn2_0_0 = finalizationRet2_0_0(errorMessage, typeError, otherHead)
                     ' if Transaction.InTransaction then
        '                Transaction.RollBack
        '              end if
                      exit function
                    end if
                  else
                    typeError = 2
                    errorMessage = " Базовая накладная не найдена"
                    web_CreateReturn2_0_0 = finalizationRet2_0_0(errorMessage, typeError, otherHead)
                    'if Transaction.InTransaction then
        '              Transaction.RollBack
        '            end if
                    exit function
                  end if
                end if
                dim costncu
                'позиции  TO_USR$INV_COSTNCU
                q = Replace(objLines.ObjectItem(k).simpleValue("quantity", 0), ".", Application.DecimalSeparatorSys)
                if  Assigned(objLines.ObjectItem(k).Value("good")) then
                  goodkey = CDbl(objLines.ObjectItem(k).Value("good").simpleValue("id", ""))
                  if  Assigned(objLines.ObjectItem(k).Value("priceFromSellBill")) then
                    costncu = CDbl(objLines.ObjectItem(k).simpleValue("priceFromSellBill", ""))
                  else
                    costncu = 0
                  end if
                  if q > 0 then
                    on error resume next
                    gdcDetail.Insert
                    gdcDetail.FieldByName("GOODKEY").AsInteger = goodkey
                    gdcDetail.FieldByName("QUANTITY").AsVariant = q
                    if costncu > 0  then
                      gdcDetail.FieldByName("TO_USR$INV_COSTNCU").AsVariant = costncu
                    end if
                    gdcDetail.Post
                    if Err.Number <> 0 then
                      typeError = 2
                      errorMessage = " Ошибка при создании позиций документа Возврат ГП"
                      web_CreateReturn2_0_0 = finalizationRet2_0_0(errorMessage, typeError, otherHead)
                     ' if Transaction.InTransaction then
        '                Transaction.RollBack
        '              end if
                      exit function
                    end if
                    on error goto 0
                  end if
                end if
              end if
            next
          end if
        
          'if Transaction.InTransaction then
        '    Transaction.Commit
        '  else
        '    Transaction.RollBack
        '  end if
        
          web_CreateReturn2_0_0 = finalizationRet2_0_0(errorMessage, typeError, otherHead)
        End Function
        
        'sub  web_CreateReturn2_0_0_RollBack
        ' ' if Transaction.InTransaction then
        ''    Transaction.RollBack
        '    errorMessage = "Ошибка создания документа"
        '    typeError = 2
        '    web_CreateReturn2_0_0 = finalizationRet2_0_0(errorMessage, typeError, otherHead)
        ' ' end if
        'end sub
        
        function finalizationRet2_0_0(errorMessage, typeError, otherHead)
          dim a(2)
          a(0) = errorMessage
          a(1) = typeError
          a(2) = otherHead
          finalizationRet2_0_0 = a
        end function
        
  - 
    Properties: 
      Class: "TgdcTemplate"
      RUID: 1368975133_1691301355
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 1397519180_1691301355
    Fields: 
      NAME: "gdmn. Список заявок за период из мобильного"
      DESCRIPTION: ~
      TEMPLATETYPE: "FR4"
      EDITIONDATE: 2022-07-25T12:37:22+03:00
      TEMPLATEDATA: | 
        <?xml version="1.0" encoding="utf-8"?>
        <Tgs_fr4SingleReport Version="4.15.13" DotMatrixReport="False" EngineOptions.DoublePass="True" IniFile="\Software\Fast Reports" PreviewOptions.Buttons="4095" PreviewOptions.Zoom="1" PrintOptions.Printer="По умолчанию" PrintOptions.PrintOnSheet="0" ReportOptions.CreateDate="44732,7751854051" ReportOptions.Description.Text="" ReportOptions.LastChange="44732,7751854051" ScriptLanguage="PascalScript" ScriptText.Text="begin&#13;&#10;&#13;&#10;end." PropData="08446174617365747301010C2200000020446174615365743D22444154412220446174615365744E616D653D22444154412200010C2400000020446174615365743D2250524943452220446174615365744E616D653D2250524943452200010C2A00000020446174615365743D2250524943454B52532220446174615365744E616D653D2250524943454B52532200010C1C00000020446174615365743D22512220446174615365744E616D653D22512200010C2400000020446174615365743D225449544C452220446174615365744E616D653D225449544C45220000095661726961626C65730100055374796C650100">
          <TfrxDataPage Name="Data" Height="1000" Left="0" Top="0" Width="1000"/>
          <TfrxReportPage Name="Page1" PaperWidth="210" PaperHeight="297" PaperSize="9" LeftMargin="10" RightMargin="10" TopMargin="10" BottomMargin="10" ColumnWidth="0" ColumnPositions.Text="" HGuides.Text="" VGuides.Text="">
            <TfrxReportTitle Name="ReportTitle1" Height="22,67718" Left="0" Top="18,89765" Width="718,1107" Stretched="True">
              <TfrxMemoView Name="Memo1" Align="baWidth" Left="0" Top="3,77953" Width="718,1107" Height="18,89765" ShowHint="False" StretchMode="smMaxHeight" Font.Charset="1" Font.Color="0" Font.Height="-13" Font.Name="Arial" Font.Style="1" HAlign="haCenter" ParentFont="False" Text="РЎРїРёСЃРѕРє Р·Р°СЏРІРѕРє РёР· РјРѕР±РёР»СЊРЅРѕРіРѕ РїРѕ Р°РіРµРЅС‚Р°Рј&#13;&#10;Р·Р° РїРµСЂРёРѕРґ СЃ [TITLE.&#34;DATEBEGIN&#34;] РїРѕ [TITLE.&#34;DATEEND&#34;]"/>
            </TfrxReportTitle>
            <TfrxGroupHeader Name="GroupHeader1" Height="18,89765" Left="0" Top="102,04731" Width="718,1107" Condition="Q.&#34;AGENTNAME&#34;" StartNewPage="True">
              <TfrxMemoView Name="Memo2" Align="baWidth" Left="0" Top="0" Width="718,1107" Height="18,89765" ShowHint="False" Font.Charset="1" Font.Color="0" Font.Height="-13" Font.Name="Arial" Font.Style="1" HAlign="haCenter" ParentFont="False" Text="[Q.&#34;AGENTNAME&#34;]"/>
            </TfrxGroupHeader>
            <TfrxGroupHeader Name="GroupHeader2" Height="50,03154" Left="0" Top="143,62214" Width="718,1107" Condition="Q.&#34;ID&#34;" Stretched="True">
              <TfrxMemoView Name="Memo3" Left="0" Top="12,23624" Width="718,1107" Height="18,89765" ShowHint="False" StretchMode="smMaxHeight" Color="12632256" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="1" Frame.Typ="15" ParentFont="False" Text="в„– [Q.&#34;NUMBER&#34;] Р”Р°С‚Р° РѕС‚РіСЂСѓР·РєРё [Q.&#34;USR$ONDATE&#34;]&#13;&#10;[Q.&#34;HCOMPANYNAME&#34;], [Q.&#34;COMPANYNAME&#34;]"/>
              <TfrxMemoView Name="Memo4" Left="0" Top="31,13389" Width="461,10266" Height="18,89765" ShowHint="False" Font.Charset="1" Font.Color="0" Font.Height="-13" Font.Name="Arial" Font.Style="1" Frame.Typ="15" ParentFont="False" Text="РќР°РёРјРµРЅРѕРІР°РЅРёРµ РўРњР¦"/>
              <TfrxMemoView Name="Memo5" Left="461,10266" Top="31,13389" Width="86,92919" Height="18,89765" ShowHint="False" Font.Charset="1" Font.Color="0" Font.Height="-13" Font.Name="Arial" Font.Style="1" Frame.Typ="15" HAlign="haCenter" ParentFont="False" Text="РІРµСЃ (РєРі)"/>
              <TfrxMemoView Name="Memo12" Left="805,03989" Top="35,01577" Width="86,92919" Height="18,89765" ShowHint="False" Font.Charset="1" Font.Color="0" Font.Height="-13" Font.Name="Arial" Font.Style="1" Frame.Typ="15" HAlign="haCenter" ParentFont="False" Text="РІРµСЃ (РєРі)"/>
              <TfrxMemoView Name="Memo16" Left="548,59091" Top="31,23624" Width="71,81107" Height="18,89765" ShowHint="False" Font.Charset="1" Font.Color="0" Font.Height="-13" Font.Name="Arial" Font.Style="1" Frame.Typ="15" HAlign="haCenter" ParentFont="False" Text="С†РµРЅР°"/>
              <TfrxMemoView Name="Memo17" Left="620,29963" Top="31,23624" Width="98,26778" Height="18,89765" ShowHint="False" Font.Charset="1" Font.Color="0" Font.Height="-13" Font.Name="Arial" Font.Style="1" Frame.Typ="15" HAlign="haCenter" ParentFont="False" Text="СЃСѓРјРјР° (СЂСѓР±)"/>
            </TfrxGroupHeader>
            <TfrxMasterData Name="MasterData1" Height="19" Left="0" Top="215,43321" Width="718,1107" ColumnWidth="0" ColumnGap="0" DataSetName="Q" RowCount="0">
              <TfrxMemoView Name="Memo6" Align="baLeft" Left="0" Top="0" Width="461,10266" Height="18,89765" ShowHint="False" DataField="GOODNAME" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="0" Frame.Typ="15" ParentFont="False" Text="[Q.&#34;GOODNAME&#34;]"/>
              <TfrxMemoView Name="Memo7" Align="baLeft" Left="461,10266" Top="0" Width="86,92919" Height="18,89765" ShowHint="False" DataField="USR$QUANTITY" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="0" Frame.Typ="15" HAlign="haRight" ParentFont="False" Text="[Q.&#34;USR$QUANTITY&#34;]"/>
              <TfrxMemoView Name="Memo13" Align="baLeft" Left="548,03185" Top="0" Width="71,81107" Height="18,89765" ShowHint="False" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="0" Frame.Typ="15" HAlign="haRight" ParentFont="False" Text="[DATA.&#34;fsn&#34;]"/>
              <TfrxMemoView Name="Memo18" Align="baLeft" Left="619,84292" Top="0" Width="98,26778" Height="18,89765" ShowHint="False" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="0" Frame.Typ="15" HAlign="haRight" ParentFont="False" Text="[DATA.&#34;summa&#34;]"/>
            </TfrxMasterData>
            <TfrxGroupFooter Name="GroupFooter1" Height="18,89765" Left="0" Top="257,00804" Width="718,1107">
              <TfrxMemoView Name="Memo8" Align="baLeft" Left="0" Top="0" Width="461,10266" Height="18,89765" ShowHint="False" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="1" Frame.Typ="15" HAlign="haRight" ParentFont="False" Text="РС‚РѕРіРѕ:"/>
              <TfrxMemoView Name="Memo9" Align="baLeft" Left="461,10266" Top="0" Width="86,92919" Height="18,89765" ShowHint="False" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="1" Frame.Typ="15" HAlign="haRight" ParentFont="False" Text="[SUM(&#60;Q.&#34;USR$QUANTITY&#34;&#62;,MasterData1)]"/>
              <TfrxMemoView Name="Memo14" Align="baLeft" Left="548,03185" Top="0" Width="71,81107" Height="18,89765" ShowHint="False" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="1" Frame.Typ="15" HAlign="haRight" ParentFont="False" Text=""/>
              <TfrxMemoView Name="Memo19" Align="baLeft" Left="619,84292" Top="0" Width="98,26778" Height="18,89765" ShowHint="False" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="1" Frame.Typ="15" HAlign="haRight" ParentFont="False" Text="[SUM(&#60;DATA.&#34;summa&#34;&#62;,MasterData1)]"/>
            </TfrxGroupFooter>
            <TfrxGroupFooter Name="GroupFooter2" Height="18,89765" Left="0" Top="298,58287" Width="718,1107">
              <TfrxMemoView Name="Memo10" Align="baLeft" Left="0" Top="0" Width="461,10266" Height="18,89765" ShowHint="False" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="1" Frame.Typ="15" HAlign="haRight" ParentFont="False" Text="Р’СЃРµРіРѕ РїРѕ [Q.&#34;AGENTNAME&#34;]:"/>
              <TfrxMemoView Name="Memo11" Align="baLeft" Left="461,10266" Top="0" Width="86,92919" Height="18,89765" ShowHint="False" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="1" Frame.Typ="15" HAlign="haRight" ParentFont="False" Text="[SUM(&#60;Q.&#34;USR$QUANTITY&#34;&#62;,MasterData1)]"/>
              <TfrxMemoView Name="Memo15" Align="baLeft" Left="548,03185" Top="0" Width="71,81107" Height="18,89765" ShowHint="False" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="1" Frame.Typ="15" HAlign="haRight" ParentFont="False" Text=""/>
              <TfrxMemoView Name="Memo20" Align="baLeft" Left="619,84292" Top="0" Width="98,26778" Height="18,89765" ShowHint="False" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="1" Frame.Typ="15" HAlign="haRight" ParentFont="False" Text="[SUM(&#60;DATA.&#34;summa&#34;&#62;,MasterData1)]"/>
            </TfrxGroupFooter>
            <TfrxFooter Name="Footer1" Height="18,89765" Left="0" Top="340,1577" Width="718,1107">
              <TfrxMemoView Name="Memo21" Align="baLeft" Left="0" Top="0" Width="461,10266" Height="18,89765" ShowHint="False" Color="12632256" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="1" Frame.Typ="15" HAlign="haRight" ParentFont="False" Text="Р’РЎР•Р“Рћ РїРѕ РѕС‚РґРµР»Сѓ:"/>
              <TfrxMemoView Name="Memo22" Align="baLeft" Left="461,10266" Top="0" Width="86,92919" Height="18,89765" ShowHint="False" Color="12632256" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="1" Frame.Typ="15" HAlign="haRight" ParentFont="False" Text="[SUM(&#60;Q.&#34;USR$QUANTITY&#34;&#62;,MasterData1)]"/>
              <TfrxMemoView Name="Memo23" Align="baLeft" Left="548,03185" Top="0" Width="71,81107" Height="18,89765" ShowHint="False" Color="12632256" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="1" Frame.Typ="15" HAlign="haRight" ParentFont="False" Text=""/>
              <TfrxMemoView Name="Memo24" Align="baLeft" Left="619,84292" Top="0" Width="98,26778" Height="18,89765" ShowHint="False" Color="12632256" DataSetName="Q" DisplayFormat.FormatStr="%2.2f" DisplayFormat.Kind="fkNumeric" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="1" Frame.Typ="15" HAlign="haRight" HideZeros="True" ParentFont="False" Text="[SUM(&#60;DATA.&#34;summa&#34;&#62;,MasterData1)]"/>
            </TfrxFooter>
            <TfrxPageFooter Name="PageFooter1" Height="22,67718" Left="0" Top="419,52783" Width="718,1107">
              <TfrxMemoView Name="Memo25" Align="baRight" Left="476,22078" Top="1,77953" Width="241,88992" Height="18,89765" ShowHint="False" Font.Charset="1" Font.Color="0" Font.Height="-13" Font.Name="Arial" Font.Style="0" HAlign="haRight" ParentFont="False" Text="РЎС‚СЂ.[page] РёР· [totalPages]"/>
            </TfrxPageFooter>
          </TfrxReportPage>
        </Tgs_fr4SingleReport>
        
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 1397519181_1691301355
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 1397519180_1691301355
    Fields: 
      NAME: "rp_Main1397519181_1691301355"
      COMMENT: ~
      EVENT: ~
      FUNCTIONTYPE: ~
      GROUPNAME: ~
      INHERITEDRULE: 0
      LANGUAGE: "VBScript"
      LOCALNAME: ~
      MODIFYDATE: ~
      MODULE: "REPORTMAIN"
      MODULECODE: "147019304_1677413867 gdc_frmUserComplexDocument147019291_1677413867"
      OBJECTNAME: "gdc_frmUserComplexDocument147019291_1677413867"
      OWNERNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      USEDEBUGINFO: 0
      EDITIONDATE: 2022-07-25T12:38:16+03:00
      DISPLAYSCRIPT: | 
        RP_MAIN1397519181_1691301355
        GETPRICEVALUE
        
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAUEVSSU9EGQAAAM/l8Oju5CAo7+4g5ODy5SDu8uPw8+fq6CkAAAAAAAAAAAAA
        AAAMAAAAAAAAAAACAAAAXlJGTlNUUFJTVAUAAABBR0VOVAUAAADA4+Xt8goAAABnZF9jb250YWN0
        BAAAAG5hbWUCAAAAaWQIgQAAAGdnMS5pZCBpbiAoc2VsZWN0IGMuaWQgZnJvbSBnZF9jb250YWN0
        IGMgam9pbiB1c3IkZ2Rtbl91c2VycyB1IG9uIHUudXNyJGNvbnRhY3RrZXkgPSBjLmlkIHdoZXJl
        IGNvYWxlc2NlKHUuVVNSJE5PVEFDVElWRSwgMCkgPSAwKQAAAAAAAAAARk5TVEZMUFI=
      SCRIPT: | 
        Option Explicit
        Function rp_Main1397519181_1691301355(period, agent)
          BaseQueryList.Clear
          Dim q, str, title, agents, ibsql, Creator
          agents = ""
          agents = JOIN(agent, ",")
          Set title = BaseQueryList.Query(BaseQueryList.Add("title", 0))
          title.SQL = _
            "SELECT con.Name, p.Name as PeopleName, " & _
            "'" & period(1) &  "' as DateEnd,  " & _
            "'" & period(0) &  "' as DateBegin " & _
            "  FROM gd_contact con " & _
            " JOIN gd_contact P ON con.ID = " & IBLogin.CompanyKey & _
            " AND p.ID = " & IBLogin.ContactKey
          title.Open
          dim q1, q2, price, priceKRS
          Set q1 = BaseQueryList.Query(BaseQueryList.Add("price", 0))
          q1.SQL = _
            " SELECT FIRST(1) documentkey, relevancedate " & _
            "  FROM " & _
            "    inv_price p " & _
            "      left join gd_document doc ON p.documentkey = doc.id " & _
            "  WHERE doc.documenttypekey = <RUID XID = ""147040135"" DBID = ""536200041""/> " & _
            "    and p.usr$vbpf_pricekey is null and relevancedate <= '" & period(0) & "'" & _
            "  ORDER BY relevancedate DESC "
          q1.Open
          price = q1.FieldByName("documentkey").AsInteger
          
          Set q2 = BaseQueryList.Query(BaseQueryList.Add("priceKRS", 0))
          q2.SQL = _
          "  SELECT FIRST(1) documentkey, relevancedate " & _
          "  FROM " & _
          "    inv_price p " & _
          "      left join gd_document doc ON p.documentkey = doc.id " & _
          "  WHERE doc.documenttypekey = <RUID XID = ""997939805"" DBID = ""1691301355""/> " & _
          "    and p.usr$vbpf_pricekey is null and relevancedate <= '" & period(0) & "'" & _
          "  ORDER BY relevancedate DESC "
          q2.Open
          priceKRS = q2.FieldByName("documentkey").AsInteger
          set Creator = new TCreator
          set ibsql = Creator.GetObject(nil, "TIBSQL", "")
          ibsql.Transaction = gdcBaseManager.ReadTransaction
          if agents > "" then
            str = " and b.USR$TOVAROVED in ( " & agents & " )"
          else
            str = ""
          end if
          Set q = BaseQueryList.Query(BaseQueryList.Add("q", 0))
          q.SQL = _
            "select distinct " & _
            "    tov.name as agentName, " & _
            "    doc.id, " & _
            "    b.USR$ONDATE, " & _
            "    doc.number, " & _
            "    hCompany.name as hCompanyName, " & _
            "    hCompany.id as hCompanyKey, " & _
            "    company.NAME as companyName, " & _
            "    g.name as goodname, " & _
            "    g.id as goodkey, " & _
            "    coalesce(g.USR$INV_WEIGHT, 1) as invWeight, " & _
            "    bl.USR$QUANTITY, " & _
            "    bl.DOCUMENTKEY " & _
            "  from USR$BER_CLAIM b " & _
            "    left join gd_document doc on doc.ID = b.DOCUMENTKEY " & _
            "    left join gd_contact tov on tov.ID = b.USR$TOVAROVED " & _
            "    left join gd_contact hCompany on hCompany.ID = b.USR$HEADCOMPANYKEY " & _
            "    left join gd_contact company on company.ID = b.USR$CONTACTKEY " & _
            "    left join USR$BER_CLAIMLINE bl on bl.MASTERKEY = b.DOCUMENTKEY " & _
            "    left join gd_good g on g.ID = bl.USR$GOODKEY " & _
            "  where b.USR$ONDATE >= :dateBegin " & _
            "    and b.USR$ONDATE <= :dateEnd " & _
            "    and coalesce(b.USR$ISWS, 0) = 1 " & _
            "    and not bl.DOCUMENTKEY is null " & _
            str & _
            "  order by 1, 2, 5, 7, 8 "
          q.ParamByName("dateBegin").AsDateTime = period(0)
          q.ParamByName("dateEnd").AsDateTime = period(1)
          q.Open
          
          dim p, headcompany,  goodkey, data, summa
          
          set data = BaseQueryList.Query(BaseQueryList.Add("data", 1))
          call data.AddField("documentkey", "ftInteger", 0, 0)
          call data.AddField("fsn", "ftFloat", 0, 0)
          call data.AddField("summa", "ftFloat", 0, 0)
          data.Open
          
          while not q.EOF
            headcompany = q.FieldByName("hCompanyKey").AsInteger
            goodkey = q.FieldByName("goodkey").AsInteger
            p = getPriceValue(price, priceKRS, headcompany, goodkey, ibsql)
            summa = round(q.FieldByName("USR$QUANTITY").AsCurrency/q.FieldByName("invWeight").AsCurrency) * p
            data.Insert
            data.FieldByName("fsn").AsCurrency = p
            data.FieldByName("summa").AsCurrency = summa
            data.FieldByName("documentkey").AsInteger = q.FieldByName("documentkey").AsInteger
            data.Post
            q.Next
          wend
          call BaseQueryList.AddMasterDetail("q", "documentkey", "data", "documentkey")
          Set rp_Main1397519181_1691301355 = BaseQueryList
        End Function
        
        function getPriceValue(price, priceKRS, headcompany, goodkey, ibsql)
          dim distPriceCompany, distPrice, value
          distPriceCompany = 0
          distPrice = 0
          ' Прайс со скидкой по данной организации
          ibsql.Close
          ibsql.SQL.Text = _
            "    SELECT FIRST(1) p.DOCUMENTKEY FROM " & _
            "      inv_price p JOIN inv_priceline l ON p.documentkey = l.pricekey " & _
            "    WHERE " & _
            "      p.usr$vbpf_pricekey in (:price, :priceKRS) AND l.goodkey = :id " & _
            "      AND (p.usr$vbpf_todate is null or p.usr$vbpf_todate >= current_date) " & _
            "      AND p.relevancedate <= current_date AND coalesce(p.usr$vbpf_onlyfirmtrade, 0) = 0 " & _
            "      AND p.USR$COMPANYKEY = :mainKey " & _
            "      ORDER BY p.relevancedate DESC  "
          ibsql.ParamByName("mainKey").AsInteger = headcompany
          ibsql.ParamByName("price").AsInteger = price
          ibsql.ParamByName("priceKRS").AsInteger = priceKRS
          ibsql.ParamByName("id").AsInteger = goodkey
          ibsql.ExecQuery
          if ibsql.RecordCount > 0 then
            distPriceCompany = ibsql.FieldByName("DOCUMENTKEY").AsInteger
          end if
          if  distPriceCompany = 0 then
            ' Общий прайс со скидкой
            ibsql.Close
            ibsql.SQL.Text = _
              "    SELECT FIRST(1) p.DOCUMENTKEY FROM " & _
              "      inv_price p JOIN inv_priceline l ON p.documentkey = l.pricekey " & _
              "    WHERE " & _
              "      p.usr$vbpf_pricekey in (:price, :priceKRS) AND l.goodkey = :id " & _
              "      AND (p.usr$vbpf_todate is null or p.usr$vbpf_todate >= current_date) " & _
              "      AND p.relevancedate <= current_date AND coalesce(p.usr$vbpf_onlyfirmtrade, 0) = 0 " & _
              "      AND p.USR$COMPANYKEY IS NULL " & _
              "      ORDER BY p.relevancedate DESC "
            ibsql.ParamByName("price").AsInteger = price
            ibsql.ParamByName("priceKRS").AsInteger = priceKRS
            ibsql.ParamByName("id").AsInteger = goodkey
            ibsql.ExecQuery
            if ibsql.RecordCount > 0 then
              distPrice = ibsql.FieldByName("DOCUMENTKEY").AsInteger
            end if
          end if
          ibsql.Close
          ibsql.SQL.Text = _
            "  select first 1 " & _
            "    p.USR$COSTNDE as FSN " & _
            "  from inv_priceline p " & _
            "  where PRICEKEY in (:price, :priceKRS) and p.goodkey = :id "
          ibsql.ParamByName("id").AsInteger = goodkey
          if (distPriceCompany > 0) then
            ibsql.ParamByName("price").AsInteger = distPriceCompany
          else
            if (distPrice > 0) then
              ibsql.ParamByName("price").AsInteger = distPrice
            else
              ibsql.ParamByName("price").AsInteger = price
              ibsql.ParamByName("priceKRS").AsInteger = priceKRS
            end if
          end if
          ibsql.ExecQuery
          if ibsql.RecordCount > 0 then
            value = ibsql.FieldByName("FSN").AsCurrency
          else
            value = 0
          end if
          getPriceValue = value
        end function
        
  - 
    Properties: 
      Class: "TgdcReport"
      RUID: 1397519180_1691301355
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      NAME: "04. Список заявок за период из мобильного"
      DESCRIPTION: ~
      DISPLAYINMENU: 1
      EVENTFORMULAKEY: ~
      FOLDERKEY: "147019303_1677413867 Исследователь\\Мобильное приложение (WS)\\Документы"
      FRQREFRESH: 1
      GLOBALREPORTKEY: ~
      ISLOCALEXECUTE: 1
      ISREBUILD: 1
      MAINFORMULAKEY: "1397519181_1691301355 rp_Main1397519181_1691301355"
      MODALPREVIEW: 0
      PARAMFORMULAKEY: ~
      PREVIEW: 1
      REPORTGROUPKEY: "147022658_1677413867 Отчеты(gdc_frmUserComplexDocument147019291_1677413867)"
      SERVERKEY: ~
      TEMPLATEKEY: "1368975133_1691301355 gdmn. Список заявок за период из мобильного"
      EDITIONDATE: 2022-07-25T12:38:16+03:00
  - 
    Properties: 
      Class: "TgdcTemplate"
      RUID: 1368977738_1691301355
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 1368977728_1691301355
    Fields: 
      NAME: "gdmn. Список заявок за период из мобиль1368977738_1691301355"
      DESCRIPTION: ~
      TEMPLATETYPE: "FR4"
      EDITIONDATE: 2022-06-21T17:14:25+03:00
      TEMPLATEDATA: | 
        <?xml version="1.0" encoding="utf-8"?>
        <Tgs_fr4SingleReport Version="4.15.13" DotMatrixReport="False" IniFile="\Software\Fast Reports" PreviewOptions.Buttons="4095" PreviewOptions.Zoom="1" PrintOptions.Printer="По умолчанию" PrintOptions.PrintOnSheet="0" ReportOptions.CreateDate="44732,7751854051" ReportOptions.Description.Text="" ReportOptions.LastChange="44732,7751854051" ScriptLanguage="PascalScript" ScriptText.Text="begin&#13;&#10;&#13;&#10;end." PropData="08446174617365747301010C1C00000020446174615365743D22512220446174615365744E616D653D22512200010C2400000020446174615365743D225449544C452220446174615365744E616D653D225449544C45220000095661726961626C65730100055374796C650100">
          <TfrxDataPage Name="Data" Height="1000" Left="0" Top="0" Width="1000"/>
          <TfrxReportPage Name="Page1" PaperWidth="210" PaperHeight="297" PaperSize="9" LeftMargin="10" RightMargin="10" TopMargin="10" BottomMargin="10" ColumnWidth="0" ColumnPositions.Text="" HGuides.Text="" VGuides.Text="">
            <TfrxReportTitle Name="ReportTitle1" Height="60,47248" Left="0" Top="18,89765" Width="718,1107">
              <TfrxMemoView Name="Memo1" Align="baWidth" Left="0" Top="3,77953" Width="718,1107" Height="18,89765" ShowHint="False" StretchMode="smActualHeight" Font.Charset="1" Font.Color="0" Font.Height="-13" Font.Name="Arial" Font.Style="1" HAlign="haCenter" ParentFont="False" Text="РЎРїРёСЃРѕРє РѕС‚РєР»РѕРЅРµРЅРЅС‹С… Р·Р°СЏРІРѕРє РёР· РјРѕР±РёР»СЊРЅРѕРіРѕ РїРѕ Р°РіРµРЅС‚Р°Рј&#13;&#10;Р·Р° РїРµСЂРёРѕРґ СЃ [TITLE.&#34;DATEBEGIN&#34;] РїРѕ [TITLE.&#34;DATEEND&#34;]"/>
            </TfrxReportTitle>
            <TfrxGroupHeader Name="GroupHeader1" Height="37,7953" Left="0" Top="139,84261" Width="718,1107" Condition="Q.&#34;AGENTNAME&#34;" StartNewPage="True">
              <TfrxMemoView Name="Memo2" Align="baWidth" Left="0" Top="0" Width="718,1107" Height="18,89765" ShowHint="False" Font.Charset="1" Font.Color="0" Font.Height="-13" Font.Name="Arial" Font.Style="1" HAlign="haCenter" ParentFont="False" Text="[Q.&#34;AGENTNAME&#34;]"/>
            </TfrxGroupHeader>
            <TfrxMasterData Name="MasterData1" Height="18,89765" Left="0" Top="200,31509" Width="718,1107" ColumnWidth="0" ColumnGap="0" DataSetName="Q" RowCount="0" Stretched="True">
              <TfrxMemoView Name="Memo6" Align="baLeft" Left="94,48825" Top="0" Width="623,62245" Height="18,89765" ShowHint="False" StretchMode="smMaxHeight" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="0" Frame.Typ="15" ParentFont="False" Text="[Q.&#34;USR$DESCRIPTION&#34;]"/>
              <TfrxMemoView Name="Memo3" Align="baLeft" Left="0" Top="0" Width="94,48825" Height="18,89765" ShowHint="False" StretchMode="smMaxHeight" DataField="USR$ONDATE" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="0" Frame.Typ="15" ParentFont="False" Text="[Q.&#34;USR$ONDATE&#34;]"/>
            </TfrxMasterData>
          </TfrxReportPage>
        </Tgs_fr4SingleReport>
        
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 1368977729_1691301355
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 1368977728_1691301355
    Fields: 
      NAME: "rp_Main1397519181_16913013551368977729_1691301355"
      COMMENT: ~
      EVENT: ~
      FUNCTIONTYPE: ~
      GROUPNAME: ~
      INHERITEDRULE: 0
      LANGUAGE: "VBScript"
      LOCALNAME: ~
      MODIFYDATE: ~
      MODULE: "REPORTMAIN"
      MODULECODE: "147019304_1677413867 gdc_frmUserComplexDocument147019291_1677413867"
      OBJECTNAME: "gdc_frmUserComplexDocument147019291_1677413867"
      OWNERNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      USEDEBUGINFO: 0
      EDITIONDATE: 2022-06-21T17:14:26+03:00
      DISPLAYSCRIPT: | 
        RP_MAIN1397519181_16913013551368977729_1691301355
        
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAUEVSSU9EGQAAAM/l8Oju5CAo7+4g5ODy5SDu8uPw8+fq6CkAAAAAAAAAAAAA
        AAAMAAAAAAAAAAACAAAAXlJGTlNUUFJTVAUAAABBR0VOVAUAAADA4+Xt8j0AAABnZF9jb250YWN0
        IGMgam9pbiB1c3IkZ2Rtbl91c2VycyB1IG9uIHUudXNyJGNvbnRhY3RrZXkgPSBjLmlkBgAAAGMu
        bmFtZQQAAABjLmlkByAAAABjb2FsZXNjZSh1LlVTUiROT1RBQ1RJVkUsIDApID0gMAAAAAAAAAAA
        Rk5TVEZMUFI=
      SCRIPT: | 
        Option Explicit
        Function rp_Main1397519181_16913013551368977729_1691301355(period, agent)
          BaseQueryList.Clear
        
          Dim q, str, title
          Set title = BaseQueryList.Query(BaseQueryList.Add("title", 0))
          title.SQL = _
            "SELECT con.Name, p.Name as PeopleName, " & _
            "'" & period(1) &  "' as DateEnd,  " & _
            "'" & period(0) &  "' as DateBegin " & _
            "  FROM gd_contact con " & _
            " JOIN gd_contact P ON con.ID = " & IBLogin.CompanyKey & _
            " AND p.ID = " & IBLogin.ContactKey
          title.Open
            
          if agent(0) > - 1 then
            str = " and b.USR$CONTACTKEY =  " & agent(0)
          else
            str = ""
          end if
          Set q = BaseQueryList.Query(BaseQueryList.Add("q", 0))
          q.SQL = _
            " select distinct " & _
            "    tov.name as agentName, " & _
            "    b.USR$ONDATE, " & _
            "    b.USR$DESCRIPTION " & _
            "  from USR$GDMN_LOG_ERRORS b " & _
            "    left join gd_contact tov on tov.ID = b.USR$CONTACTKEY " & _
            "  where b.USR$ONDATE >= :dateBegin " & _
            "    and b.USR$ONDATE <= :dateEnd " & str & _
            "  order by 1, 2 "
        
          q.ParamByName("dateBegin").AsDateTime = period(0)
          q.ParamByName("dateEnd").AsDateTime = period(1)
          q.Open
        
          Set rp_Main1397519181_16913013551368977729_1691301355 = BaseQueryList
        End Function
        
  - 
    Properties: 
      Class: "TgdcReport"
      RUID: 1368977728_1691301355
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      NAME: "05. Список отклоненных заявок за период из мобильного"
      DESCRIPTION: ~
      DISPLAYINMENU: 1
      EVENTFORMULAKEY: ~
      FOLDERKEY: "147019303_1677413867 Исследователь\\Мобильное приложение (WS)\\Документы"
      FRQREFRESH: 1
      GLOBALREPORTKEY: ~
      ISLOCALEXECUTE: 1
      ISREBUILD: 1
      MAINFORMULAKEY: "1368977729_1691301355 rp_Main1397519181_16913013551368977729_1691301355"
      MODALPREVIEW: 0
      PARAMFORMULAKEY: ~
      PREVIEW: 1
      REPORTGROUPKEY: "147022658_1677413867 Отчеты(gdc_frmUserComplexDocument147019291_1677413867)"
      SERVERKEY: ~
      TEMPLATEKEY: "1368977738_1691301355 gdmn. Список заявок за период из мобиль1368977738_1691301355"
      EDITIONDATE: 2022-07-25T12:01:53+03:00
  - 
    Properties: 
      Class: "TgdcTemplate"
      RUID: 1500735362_1913435101
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 1500735352_1913435101
    Fields: 
      NAME: "gdmn. Список заявок за период из мобиль1500735362_1913435101"
      DESCRIPTION: ~
      TEMPLATETYPE: "FR4"
      EDITIONDATE: 2022-09-02T13:52:21+03:00
      TEMPLATEDATA: | 
        <?xml version="1.0" encoding="utf-8"?>
        <Tgs_fr4SingleReport Version="4.15.13" DotMatrixReport="False" EngineOptions.DoublePass="True" IniFile="\Software\Fast Reports" PreviewOptions.Buttons="4095" PreviewOptions.Zoom="1" PrintOptions.Printer="По умолчанию" PrintOptions.PrintOnSheet="0" ReportOptions.CreateDate="44732,7751854051" ReportOptions.Description.Text="" ReportOptions.LastChange="44732,7751854051" ScriptLanguage="PascalScript" ScriptText.Text="begin&#13;&#10;&#13;&#10;end." PropData="08446174617365747301010C1C00000020446174615365743D22512220446174615365744E616D653D22512200010C2400000020446174615365743D225449544C452220446174615365744E616D653D225449544C45220000095661726961626C65730100055374796C650100">
          <TfrxDataPage Name="Data" Height="1000" Left="0" Top="0" Width="1000"/>
          <TfrxReportPage Name="Page1" PaperWidth="210" PaperHeight="297" PaperSize="9" LeftMargin="10" RightMargin="10" TopMargin="10" BottomMargin="10" ColumnWidth="0" ColumnPositions.Text="" HGuides.Text="" VGuides.Text="">
            <TfrxReportTitle Name="ReportTitle1" Height="86,92919" Left="0" Top="18,89765" Width="718,1107">
              <TfrxMemoView Name="Memo1" Align="baWidth" Left="0" Top="3,77953" Width="718,1107" Height="41,57483" ShowHint="False" StretchMode="smMaxHeight" Font.Charset="1" Font.Color="0" Font.Height="-13" Font.Name="Arial" Font.Style="1" HAlign="haCenter" ParentFont="False" Text="01. РљСЂР°С‚РєРёР№ СЃРІРѕРґ Р·Р°СЏРІРѕРє  РёР· РјРѕР±РёР»СЊРЅРѕРіРѕ РїРѕ Р°РіРµРЅС‚Р°Рј&#13;&#10;Р·Р° РїРµСЂРёРѕРґ СЃ [TITLE.&#34;DATEBEGIN&#34;] РїРѕ [TITLE.&#34;DATEEND&#34;]"/>
            </TfrxReportTitle>
            <TfrxMasterData Name="MasterData1" Height="19" Left="0" Top="207,87415" Width="718,1107" ColumnWidth="0" ColumnGap="0" DataSetName="Q" RowCount="0" Stretched="True">
              <TfrxMemoView Name="Memo6" Align="baLeft" Left="34,01577" Top="0" Width="461,10266" Height="18,89765" ShowHint="False" StretchMode="smMaxHeight" DataField="AGENTNAME" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="0" Frame.Typ="15" ParentFont="False" Text="[Q.&#34;AGENTNAME&#34;]"/>
              <TfrxMemoView Name="Memo7" Align="baLeft" Left="495,11843" Top="0" Width="86,92919" Height="18,89765" ShowHint="False" StretchMode="smMaxHeight" DataField="N" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="0" Frame.Typ="15" HAlign="haRight" ParentFont="False" Text="[Q.&#34;N&#34;]"/>
              <TfrxMemoView Name="Memo4" Align="baLeft" Left="0" Top="0" Width="34,01577" Height="18,89765" ShowHint="False" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="0" Frame.Typ="15" ParentFont="False" Text="[Line#]"/>
            </TfrxMasterData>
            <TfrxFooter Name="Footer1" Height="18,89765" Left="0" Top="249,44898" Width="718,1107">
              <TfrxMemoView Name="Memo21" Align="baLeft" Left="0" Top="0" Width="495,11843" Height="18,89765" ShowHint="False" Color="12632256" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="1" Frame.Typ="15" HAlign="haRight" ParentFont="False" Text="Р’РЎР•Р“Рћ РїРѕ РѕС‚РґРµР»Сѓ:"/>
              <TfrxMemoView Name="Memo22" Align="baLeft" Left="495,11843" Top="0" Width="86,92919" Height="18,89765" ShowHint="False" Color="12632256" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="1" Frame.Typ="15" HAlign="haRight" ParentFont="False" Text="[SUM(&#60;Q.&#34;N&#34;&#62;,MasterData1)]"/>
            </TfrxFooter>
            <TfrxPageFooter Name="PageFooter1" Height="22,67718" Left="0" Top="328,81911" Width="718,1107">
              <TfrxMemoView Name="Memo25" Align="baRight" Left="476,22078" Top="1,77953" Width="241,88992" Height="18,89765" ShowHint="False" Font.Charset="1" Font.Color="0" Font.Height="-13" Font.Name="Arial" Font.Style="0" HAlign="haRight" ParentFont="False" Text="РЎС‚СЂ.[page] РёР· [totalPages]"/>
            </TfrxPageFooter>
            <TfrxHeader Name="Header1" Height="18,89765" Left="0" Top="166,29932" Width="718,1107">
              <TfrxMemoView Name="Memo2" Align="baLeft" Left="0" Top="0" Width="495,11843" Height="18,89765" ShowHint="False" StretchMode="smMaxHeight" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="1" Frame.Typ="15" HAlign="haCenter" ParentFont="False" Text="РђРіРµРЅС‚"/>
              <TfrxMemoView Name="Memo3" Align="baLeft" Left="495,11843" Top="0" Width="86,92919" Height="18,89765" ShowHint="False" StretchMode="smMaxHeight" DataSetName="Q" Font.Charset="1" Font.Color="0" Font.Height="-12" Font.Name="Arial" Font.Style="1" Frame.Typ="15" HAlign="haCenter" ParentFont="False" Text="РљРѕР»РёС‡РµСЃС‚РІРѕ"/>
            </TfrxHeader>
          </TfrxReportPage>
        </Tgs_fr4SingleReport>
        
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 1500735353_1913435101
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
      HeadObject: 1500735352_1913435101
    Fields: 
      NAME: "rp_Main139751"
      COMMENT: ~
      EVENT: ~
      FUNCTIONTYPE: ~
      GROUPNAME: ~
      INHERITEDRULE: 0
      LANGUAGE: "VBScript"
      LOCALNAME: ~
      MODIFYDATE: ~
      MODULE: "REPORTMAIN"
      MODULECODE: "147019304_1677413867 gdc_frmUserComplexDocument147019291_1677413867"
      OBJECTNAME: "gdc_frmUserComplexDocument147019291_1677413867"
      OWNERNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      USEDEBUGINFO: 0
      EDITIONDATE: 2022-09-08T17:04:59+03:00
      DISPLAYSCRIPT: | 
        RP_MAIN139751
        
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QGAAAAUEVSSU9EGQAAAM/l8Oju5CAo7+4g5ODy5SDu8uPw8+fq6CkAAAAAAAAAAAAA
        AAAMAAAAAAAAAAACAAAAXlJGTlNUUFJTVAUAAABBR0VOVAUAAADA4+Xt8goAAABnZF9jb250YWN0
        BAAAAG5hbWUCAAAAaWQIgQAAAGdnMS5pZCBpbiAoc2VsZWN0IGMuaWQgZnJvbSBnZF9jb250YWN0
        IGMgam9pbiB1c3IkZ2Rtbl91c2VycyB1IG9uIHUudXNyJGNvbnRhY3RrZXkgPSBjLmlkIHdoZXJl
        IGNvYWxlc2NlKHUuVVNSJE5PVEFDVElWRSwgMCkgPSAwKQAAAAAAAAAARk5TVEZMUFI=
      SCRIPT: | 
        Option Explicit
        Function rp_Main139751(period, agent)
          BaseQueryList.Clear
          Dim q, str, title, agents, ibsql, Creator
          agents = ""
          agents = JOIN(agent, ",")
          Set title = BaseQueryList.Query(BaseQueryList.Add("title", 0))
          title.SQL = _
            "SELECT con.Name, p.Name as PeopleName, " & _
            "'" & period(1) &  "' as DateEnd,  " & _
            "'" & period(0) &  "' as DateBegin " & _
            "  FROM gd_contact con " & _
            " JOIN gd_contact P ON con.ID = " & IBLogin.CompanyKey & _
            " AND p.ID = " & IBLogin.ContactKey
          title.Open
        
          if agents > "" then
            str = " and b.USR$TOVAROVED in ( " & agents & " )"
          else
            str = ""
          end if
          Set q = BaseQueryList.Query(BaseQueryList.Add("q", 0))
          q.SQL = _
            "select distinct " & _
            "    tov.name as agentName, " & _
            "    count(b.DOCUMENTKEY) as n " & _
            "  from USR$BER_CLAIM b " & _
            "    left join gd_contact tov on tov.ID = b.USR$TOVAROVED " & _
            "  where b.USR$ONDATE >= :dateBegin " & _
            "    and b.USR$ONDATE <= :dateEnd " & _
            "    and coalesce(b.USR$ISWS, 0) = 1 " & _
            str & _
            "  group by 1 " & _
            "  order by 1 "
        
          q.ParamByName("dateBegin").AsDateTime = period(0)
          q.ParamByName("dateEnd").AsDateTime = period(1)
          q.Open
          
        
          Set rp_Main139751 = BaseQueryList
        End Function
        
        
        
  - 
    Properties: 
      Class: "TgdcReport"
      RUID: 1500735352_1913435101
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      NAME: "01. Краткий свод заявок  из мобильного по агентам"
      DESCRIPTION: ~
      DISPLAYINMENU: 1
      EVENTFORMULAKEY: ~
      FOLDERKEY: ~
      FRQREFRESH: 1
      GLOBALREPORTKEY: ~
      ISLOCALEXECUTE: 1
      ISREBUILD: 1
      MAINFORMULAKEY: "1500735353_1913435101 rp_Main139751"
      MODALPREVIEW: 0
      PARAMFORMULAKEY: ~
      PREVIEW: 1
      REPORTGROUPKEY: "147022658_1677413867 Отчеты(gdc_frmUserComplexDocument147019291_1677413867)"
      SERVERKEY: ~
      TEMPLATEKEY: "1500735362_1913435101 gdmn. Список заявок за период из мобиль1500735362_1913435101"
      EDITIONDATE: 2022-09-08T17:04:59+03:00
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 240641859_1971205439
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      NAME: "web_handCreateDebt_Agents"
      COMMENT: ~
      EVENT: ~
      FUNCTIONTYPE: ~
      GROUPNAME: ~
      INHERITEDRULE: 0
      LANGUAGE: "VBScript"
      LOCALNAME: ~
      MODIFYDATE: ~
      MODULE: "UNKNOWN"
      MODULECODE: "1010001_17 APPLICATION"
      OBJECTNAME: "APPLICATION"
      OWNERNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      USEDEBUGINFO: 0
      EDITIONDATE: 2022-12-23T17:36:27+03:00
      DISPLAYSCRIPT: | 
        WEB_HANDCREATEDEBT_AGENTS
        WEB_HANDCREATEDEBT_AGENTS_ROLLBACK
        
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QJAAAAU1lTVEVNS0VZCgAAAM/u5PHo8fLl7OAQAAAAVVNSJEdETU5fU1lTVEVNUwgA
        AAB1c3IkbmFtZQIAAABpZAcAAAAAAAAAAAAAAABGTlNURkxQUg==
      SCRIPT: | 
        Option Explicit
        '#include  web_recalcParametres
        Function web_handCreateDebt_Agents(systemkey)
          dim Creator, ibsql, Transaction, ibsqlCustomers, ibsqlDebt, sqlText, CustomerStr, i
          dim saldo, saldo_credit, saldo_debt, userkey, contactkey, ibsqlInsert, dayleft, datedebt, id
          dim ibsqlTempInsert, ibsqlGetID, contrnumber, contrdate, web_service, AError
          set Creator = new TCreator
          set web_service = (New TVB_Web_Service)(systemkey(0))
          set Transaction = Creator.GetObject(nil, "TIBTransaction", "")
          Transaction.DefaultDataBase = IBLogin.Database
          if not Transaction.InTransaction then
             Transaction.StartTransaction
          end if
        
          set ibsqlInsert = Creator.GetObject(nil, "TIBSQL", "")
          ibsqlInsert.Transaction = Transaction
          ibsqlInsert.SQL.Text = _
            "insert into USR$GDMN_DEBT (ID, USR$CONTACTKEY, USR$USERKEY, USR$SALDO, USR$SALDO_CREDIT, USR$SALDO_DEBT, USR$DATEDEBT, USR$DAYLEFT, USR$CONTRNUMBER, USR$CONTRDATE) " & _
            "values (:ID, :CONTACTKEY, :USERKEY, :SALDO, :SALDO_CREDIT, :SALDO_DEBT, :DATEDEBT, :DAYLEFT, :CONTRNUMBER, :CONTRDATE) "
        
          set ibsqlTempInsert = Creator.GetObject(nil, "TIBSQL", "")
          ibsqlTempInsert.Transaction = Transaction
          ibsqlTempInsert.SQL.Text = _
            "insert into USR$WEB_DEBT (ID, USR$CONTACTKEY,  USR$SALDO, USR$SALDO_CREDIT, USR$SALDO_DEBT, USR$DATEDEBT, USR$DAYLEFT, USR$CONTRNUMBER, USR$CONTRDATE) " & _
            "values (:ID, :CONTACTKEY, :SALDO, :SALDO_CREDIT, :SALDO_DEBT, :DATEDEBT, :DAYLEFT, :CONTRNUMBER, :CONTRDATE) "
        
          except web_handCreateDebt_Agents_Rollback(Transaction)
          set ibsql = Creator.GetObject(nil, "TIBSQL", "")
          ibsql.Transaction = Transaction
          ibsql.SQL.Text = _
            "select " & _
            "  u.USR$ERPUSERID, " & _
            "  u.USR$ERPUSERPASSWORD, " & _
            "  u.USR$ERPUSERNAME, " & _
            "  coalesce(u.USR$ISPARAMS, 0) as USR$ISPARAMS " & _
            "from USR$GDMN_SYSTEMS u " & _
            "where u.id = :id " & _
            "  and not u.USR$ERPUSERDEVICEID is null "
          ibsql.ParamByName("id").AsString = systemkey(0)
          ibsql.ExecQuery
          dim gdmnId, gdmn, gdmnPassw, isParams
          if ibsql.RecordCount > 0 then
            gdmnId = ibsql.FieldByName("USR$ERPUSERID").AsString
            gdmn = ibsql.FieldByName("USR$ERPUSERNAME").AsString
            gdmnPassw = ibsql.FieldByName("USR$ERPUSERPASSWORD").AsString
            isParams = ibsql.FieldByName("USR$ISPARAMS").AsInteger
          else
            AError =  " Пользователь ERP данной подсистемы " & _
            " отсутствует в справочнике 'Подсистемы мобильного приложения'" & vbCr & _
            " либо у него не заполнен ID устройства." & vbCr & vbCr & _
            " Выполните макрос 'Импорт подсистем с сервера' и проверьте пароль"
            call Application.MessageBox(AError , "Внимание!", vbInformation + vbOkOnly + vbApplicationModal)
            exit function
          end if
          
          dim gdcGdmnUsers, ibsqlDevice
          set gdcGdmnUsers = Creator.GetObject(nil, "TgdcAttrUserDefined", "")
          gdcGdmnUsers.Transaction = Transaction
          gdcGdmnUsers.ReadTransaction = Transaction
          gdcGdmnUsers.SubType = "USR$GDMN_USERS"
          gdcGdmnUsers.SubSet = "All"
          'Вход пользователя
          call web_service.Login(gdmn, gdmnPassw)
          if web_service.RequestStatus <> 200 then
             AError = web_service.RequestError & vbCr & vbCr & _
               " Список пользователей мобильного приложения невозможно обновить, "  & vbCr & _
               " Дебиторская задолженность будет построена только для имеюшщихся в базе данных "
             web_service.SetError(AError)
             call Application.MessageBox(AError , "Внимание!", vbInformation + vbOkOnly + vbApplicationModal)
          else
            set ibsqlDevice = Creator.GetObject(nil, "TIBSQL", "")
            ibsqlDevice.Transaction = Transaction
            on error resume next
        
            'Получаем всех пользователей компании и подсистемы
            call web_service.GetUsersWithDevice("erpUserId=" & gdmnId)
            if web_service.RequestStatus = 200 and Assigned(web_service.RequestData) then
              dim usersObj, countResults, objResult, m, userID, userName, deviceUid, _
                userAlias, userRuid, disabled, countDevices, arrDeviceUid(), j
              set usersObj = web_service.RequestData
              countResults = usersObj.Value("data").ObjectItemsCount
              objResult = usersObj.SimpleValue("result", "")
              for m = 0 to countResults - 1
                set ObjResult = usersObj.Value("data").ObjectItem(m)
                userID = trim(objResult.SimpleValue("id", ""))
                userName = trim(objResult.SimpleValue("name", ""))
                userAlias = trim(objResult.SimpleValue("alias", ""))
                userRuid = trim(objResult.SimpleValue("externalId", ""))
                countDevices = 0
                if  Assigned(objResult.Value("deviceUids")) then
                  countDevices = objResult.Value("deviceUids").ObjectItemsCount
                  if countDevices > 0 then
                    redim Preserve arrDeviceUid(countDevices - 1)
                    for j = 0 to countDevices - 1
                      arrDeviceUid(j) = objResult.Value("deviceUids").ObjectItem(j).value
                    next
                    deviceUid = arrDeviceUid
                  else
                    deviceUid = null
                  end if
                else
                  deviceUid = null
                end if
                disabled = objResult.SimpleValue("disabled", False)
                gdcGdmnUsers.Open
                comment = ""
                dim  oldContactkey, oldDisabled, idDev, oldLogin
                dim  newContactkey, newDisabled, comment, a, res
                a = web_recalcParametres(disabled, userRuid, deviceUid, isParams, userID, systemkey)
                newContactkey = a(0)
                newDisabled = a(1)
                comment = a(2)
        
                if not gdcGdmnUsers.Locate("USR$MOBILEID", Array(userID), false)  then
                  gdcGdmnUsers.Append
                  gdcGdmnUsers.FieldByName("USR$SYSTEMKEY").AsInteger = systemkey(0)
                  gdcGdmnUsers.FieldByName("USR$MOBILEID").AsString = userID
                  gdcGdmnUsers.FieldByName("USR$MOBILELOGIN").AsString = userName
                  if  newContactkey = 0 then
                    gdcGdmnUsers.FieldByName("USR$CONTACTKEY").AsVariant = null
                  else
                    gdcGdmnUsers.FieldByName("USR$CONTACTKEY").AsInteger = newContactkey
                  end if
                  gdcGdmnUsers.FieldByName("USR$NOTACTIVE").AsInteger = newDisabled
                  gdcGdmnUsers.FieldByName("USR$COMMENT").AsString = comment
                  gdcGdmnUsers.Post
                  if countDevices > 0 then
                    for j = 0 to UBound(arrDeviceUid)
                      call gdcBaseManager.ExecSingleQueryResult("select id from GD_P_GETNEXTID ", _
                        NULL, Res, Transaction)
                      idDev = Res(0, 0)
                      ibsqlDevice.Close
                      ibsqlDevice.SQL.Text = _
                        "insert into USR$GDMN_DEVICES(ID, USR$GDMN_USER, USR$MOBILEID, USR$NOTISACTIVE) "  &_
                          "values (:ID, :GDMN_USER, :MOBILEID, :NOTISACTIVE ) "
                      ibsqlDevice.ParamByName("id").AsInteger = idDev
                      ibsqlDevice.ParamByName("GDMN_USER").AsInteger = gdcGdmnUsers.FieldByName("id").AsInteger
                      ibsqlDevice.ParamByName("MOBILEID").AsString = arrDeviceUid(j)
                      ibsqlDevice.ParamByName("NOTISACTIVE").AsInteger = 0
                      ibsqlDevice.ExecQuery
                    next
                  end if
                else
                  oldDisabled = gdcGdmnUsers.FieldByName("USR$NOTACTIVE").AsVariant
                  oldContactkey = gdcGdmnUsers.FieldByName("USR$CONTACTKEY").AsInteger
                  oldLogin = gdcGdmnUsers.FieldByName("USR$MOBILELOGIN").AsString
                  if oldContactkey <> newContactkey or _
                    oldDisabled <> newDisabled or _
                      oldLogin <> userName then
                    gdcGdmnUsers.Edit
                    gdcGdmnUsers.FieldByName("USR$SYSTEMKEY").AsInteger = systemkey(0)
                    gdcGdmnUsers.FieldByName("USR$MOBILELOGIN").AsString = userName
                    if  newContactkey = 0 then
                      gdcGdmnUsers.FieldByName("USR$CONTACTKEY").AsVariant = null
                    else
                      gdcGdmnUsers.FieldByName("USR$CONTACTKEY").AsInteger = newContactkey
                    end if
                    gdcGdmnUsers.FieldByName("USR$NOTACTIVE").AsInteger = newDisabled
                    gdcGdmnUsers.FieldByName("USR$COMMENT").AsString = comment
                    gdcGdmnUsers.Post
                  end if
                  if countDevices > 0  then
                    for j = 0 to UBound(arrDeviceUid)
                      ibsqlDevice.Close
                      ibsqlDevice.SQL.Text = _
                        "select b.ID, coalesce(b.USR$NOTISACTIVE, 0) as USR$NOTISACTIVE " & vbCrLf & _
                        "from USR$GDMN_DEVICES b " & vbCrLf & _
                        "where b.USR$GDMN_USER = :masterkey " & vbCrLf & _
                        "  and b.USR$MOBILEID = :mobileId "
                      ibsqlDevice.ParamByName("masterkey").AsInteger = gdcGdmnUsers.FieldByName("id").AsInteger
                      ibsqlDevice.ParamByName("MOBILEID").AsString = arrDeviceUid(j)
                      ibsqlDevice.ExecQuery
                      if ibsqlDevice.RecordCount = 0 then
                        call gdcBaseManager.ExecSingleQueryResult("select id from GD_P_GETNEXTID ", _
                          NULL, Res, Transaction)
                        idDev = Res(0, 0)
                        ibsqlDevice.Close
                        ibsqlDevice.SQL.Text = _
                          "insert into USR$GDMN_DEVICES(ID, USR$GDMN_USER, USR$MOBILEID, USR$NOTISACTIVE) "  &_
                            "values (:ID, :GDMN_USER, :MOBILEID, :NOTISACTIVE ) "
                        ibsqlDevice.ParamByName("id").AsInteger = idDev
                        ibsqlDevice.ParamByName("GDMN_USER").AsInteger = gdcGdmnUsers.FieldByName("id").AsInteger
                        ibsqlDevice.ParamByName("MOBILEID").AsString = arrDeviceUid(j)
                        ibsqlDevice.ParamByName("NOTISACTIVE").AsInteger = 0
                        ibsqlDevice.ExecQuery
                      end if
                    next
                    'Убираем лишние, которые не используются
                    ibsqlDevice.Close
                    ibsqlDevice.SQL.Text = _
                      "select b.USR$MOBILEID " & vbCrLf & _
                      "from USR$GDMN_DEVICES b " & vbCrLf & _
                      "where b.USR$GDMN_USER = :masterkey "
                    ibsqlDevice.ParamByName("masterkey").AsInteger = gdcGdmnUsers.FieldByName("id").AsInteger
                    ibsqlDevice.ExecQuery
                    while not ibsqlDevice.EOF
                      if UBound(Filter(arrDeviceUid, ibsqlDevice.FieldByName("USR$MOBILEID").AsString, True)) < 0 then
                          call gdcBaseManager.ExecSingleQueryResult("delete from USR$GDMN_DEVICES " & _
                            "where USR$MOBILEID = :mobileId and USR$GDMN_USER = :masterkey ", _
                          Array(ibsqlDevice.FieldByName("USR$MOBILEID").AsString, gdcGdmnUsers.FieldByName("id").AsInteger) , _
                            Res, Transaction)
                      end if
                      ibsqlDevice.Next
                    wend
                  end if
                end if
              next
            end if
            if Transaction.InTransaction then
              Transaction.Commit
            end if
            if Err.Number <> 0 then
              exit function
            end if
          end if
        
          if not  Transaction.InTransaction then
            Transaction.StartTransaction
          end if
          
          set ibsqlCustomers = Creator.GetObject(nil, "TIBSQL", "")
          ibsqlCustomers.Transaction = Transaction
          set ibsqlDebt = Creator.GetObject(nil, "TIBSQL", "")
          ibsqlDebt.Transaction = Transaction
          sqlText = _
            " " & _
            "execute block " & _
            "RETURNS ( " & _
            "    NAME VARCHAR(60), " & _
            "    ID INTEGER, " & _
            "    CURRKEY INTEGER, " & _
            "    DAYLEFT INTEGER, " & _
            "    DATEDEBT DATE, " & _
            "    SALDO NUMERIC(18, 4), " & _
            "    SALDO_CREDIT NUMERIC(15, 4), " & _
            "    SALDO_DEBT NUMERIC(18, 4), " & _
            "    CONTRDATE DATE, " & _
            "    CONTRNUMBER VARCHAR(20)) " & _
            " AS " & _
            "  declare variable tempsum numeric(15,4); " & _
            "  declare variable tempsaldo numeric(15,4); " & _
            "  declare variable pay_int decimal(18,4); " & _
            "  declare variable pay_int_curr decimal(18,4); " & _
            "  declare variable datedebt_temp date; " & _
            "  declare variable date_debt1 date; " & _
            "  declare variable countday integer; " & _
            "  declare variable countaddday integer; " & _
            "  declare variable tmp_countday integer; " & _
            "  declare variable tmp_countaddday integer; " & _
            "  declare variable isok integer; " & _
            "  declare variable isfirst integer; " & _
            "  declare variable paysum numeric(15,4); " & _
            "  declare variable paysum_temp numeric(15,4); " & _
            "  declare variable documentkey integer; " & _
            "  declare variable doc_temp integer; " & _
            "  declare variable lastrealdate DATE; " & _
            "  declare variable firstdate DATE; " & _
            "  declare variable tmpfirstdate DATE; " & _
            "  declare variable tmpisp VARCHAR(60); " & _
            "BEGIN " & _
            "  firstdate = CAST((CAST('17.11.1858'AS DATE)+GEN_ID(gd_g_entry_balance_date,0)) AS DATE); " & _
            "  if (firstdate > CURRENT_DATE) then " & _
            "    tmpfirstdate = CAST('17.11.1858'AS DATE); " & _
            "  else " & _
            "    tmpfirstdate = firstdate; " & _
            "     FOR " & _
            "        SELECT " & _
            "          con.name, " & _
            "          con.id, " & _
            "          SUM(e.debitncu - e.creditncu) AS saldo " & _
            "        FROM " & _
            "          (select e.usr$gs_customer, e.debitncu, e.creditncu " & _
            "          from " & _
            "            ac_entry e " & _
            "          where " & _
            "            e.entrydate <= CURRENT_DATE AND " & _
            "            e.accountkey = 366201 AND " & _
            "            e.companykey + 0 = <companykey/> AND " & _
            "            e.currkey = 200010 and (e.usr$gs_customer in (%customer%) or e.usr$gs_customer in (%customer2%))" & _
            "     ) e " & _
            "         LEFT JOIN " & _
            "              gd_contact con ON e.usr$gs_customer = con.id " & _
            "        GROUP BY " & _
            "          1, 2 " & _
            "        HAVING g_m_round(SUM(e.debitncu - e.creditncu) / 10) * 10 <> 0 " & _
            "        ORDER BY 1 " & _
            "        INTO :NAME, " & _
            "             :ID, " & _
            "             :SALDO " & _
            "      DO " & _
            "      BEGIN " & _
            " " & _
            "        tmp_countday = 0; " & _
            "        tmp_countaddday = 0; " & _
            " " & _
            "        countday = 0; " & _
            "        countaddday = 0; " & _
            "        dayleft = 0; " & _
            "        SELECT " & _
            "          FIRST (1) doc.documentdate, doc.NUMBER, p.usr$countday, p.usr$vmk_countaddday, " & _
            "          (CASE WHEN p.usr$isbank = 1 THEN COALESCE(p.usr$countday, 0) + 2 * COALESCE(p.usr$countday, 0) / 5 ELSE COALESCE(p.usr$countday, 0) END) AS countday, " & _
            "          (CASE WHEN p.usr$isaddbank = 1 THEN COALESCE(p.usr$vmk_countaddday, 0) + 2 * COALESCE(p.usr$vmk_countaddday, 0) / 5 ELSE COALESCE(p.usr$vmk_countaddday, 0) END) AS countaddday " & _
            "        FROM " & _
            "          usr$inv_contract cont " & _
            "            LEFT JOIN gd_document doc ON cont.documentkey = doc.id " & _
            "            LEFT JOIN usr$inv_paycond p ON cont.usr$paycondkey = p.id " & _
            "        WHERE " & _
            "          cont.usr$contactkey = :id AND cont.usr$vmk_typecontract IS NULL AND doc.documentdate <= CURRENT_DATE  and (cont.usr$DATEEND >= CURRENT_DATE or cont.usr$DATEEND is null) " & _
            "        ORDER BY doc.documentdate DESC " & _
            "        INTO :contrdate, :contrnumber, :tmp_countday, :tmp_countaddday, :countday, :countaddday; " & _
            "        countday = COALESCE(countday, 0) + COALESCE(countaddday, 0); " & _
            "        datedebt_temp = contrdate; " & _
            "        IF (SALDO < 0) THEN " & _
            "        BEGIN " & _
            "          SALDO_CREDIT = -SALDO; " & _
            "          SALDO = 0; " & _
            "        END " & _
            "        ELSE " & _
            "          SALDO_CREDIT = 0; " & _
            " " & _
            "        SALDO_DEBT = 0; " & _
            "        PAY_INT = 0; " & _
            "        IF (SALDO > 0) THEN " & _
            "        BEGIN " & _
            "          date_debt1 = CURRENT_DATE - countday; " & _
            "          SELECT " & _
            "            SUM(CASE WHEN e.entrydate < :date_debt1 " & _
            "                THEN e.debitncu - e.creditncu ELSE 0 END) AS saldo_debt, " & _
            "            SUM(CASE WHEN (e.entrydate >= :date_debt1 AND e.entrydate <= CURRENT_DATE) " & _
            "                THEN e.creditncu - (CASE WHEN e.debitncu < 0 THEN e.debitncu ELSE 0 END) ELSE 0 END) AS pay_int " & _
            "          FROM " & _
            "            ac_entry e " & _
            "          WHERE " & _
            "            e.entrydate <= CURRENT_DATE AND " & _
            "            e.accountkey = 366201 AND " & _
            "            e.usr$gs_customer = :id  AND e.currkey = 200010 " & _
            "          INTO " & _
            "           :SALDO_DEBT, " & _
            "           :PAY_INT; " & _
            " " & _
            "          IF (SALDO_DEBT IS NULL) THEN " & _
            "            SALDO_DEBT = 0; " & _
            "          IF (PAY_INT IS NULL) THEN " & _
            "            PAY_INT = 0; " & _
            " " & _
            "          SALDO_DEBT = round(SALDO_DEBT - PAY_INT, 2); " & _
            "          IF (SALDO_DEBT < 0) THEN " & _
            "            SALDO_DEBT = 0; " & _
            "          tempsum = saldo; " & _
            "          isOk = 0; " & _
            "          isFirst = 1; " & _
            "          paysum = 0; " & _
            " " & _
            "          tempsum = saldo; " & _
            "          isOk = 0; " & _
            "          isFirst = 1; " & _
            "          paysum = 0; " & _
            "          FOR " & _
            "            SELECT e.entrydate, e.debitncu - e.creditncu " & _
            "            FROM " & _
            "              ac_entry e " & _
            "            WHERE " & _
            "                e.accountkey = 366201 AND " & _
            "                e.entrydate <= CURRENT_DATE AND " & _
            "                e.usr$gs_customer = :id AND " & _
            "                e.companykey + 0 = <companykey/> and (e.debitncu > 0 or e.creditncu < 0) " & _
            "            ORDER BY 1 DESC " & _
            "            INTO :datedebt_temp, :tempsaldo " & _
            "          DO " & _
            "          BEGIN " & _
            "            IF (isOk = 0) THEN " & _
            "            BEGIN " & _
            "              IF (tempsum > 0) THEN " & _
            "              BEGIN " & _
            "                tempsum = tempsum - tempsaldo; " & _
            "              END " & _
            "              ELSE " & _
            "              BEGIN " & _
            "                isOK = 1; " & _
            "                LEAVE; " & _
            "              END " & _
            "              DATEDEBT = DATEDEBT_TEMP; " & _
            "            END " & _
            "          END " & _
            "        END " & _
            "        IF (SALDO_DEBT > 0) THEN " & _
            "        BEGIN " & _
            "          DAYLEFT = CURRENT_DATE - DATEDEBT - COUNTDAY; " & _
            "          if ( dayleft < 0 ) then " & _
            "            dayleft = 0; " & _
            "        END " & _
            "        ELSE " & _
            "          dayleft = 0; " & _
            "           " & _
            "        SALDO = ROUND(saldo, 2); " & _
            "        SUSPEND; " & _
            "      END " & _
            "end "
        
          dim ibsqlTempDebt
          set ibsqlTempDebt = Creator.GetObject(nil, "TIBSQL", "")
          ibsqlTempDebt.Transaction = Transaction
        
          dim l, k, n
          dim qUsers, selectStr, userStr
          selectStr  = " z.USR$SYSTEMKEY =  " & systemkey(0)  & _
            "  and coalesce(z.USR$NOTACTIVE, 0) = 0 and COALESCE(z.USR$MOBILEID, '') <> '' " & _
            "  and not z.USR$CONTACTKEY is null "
          if gdcGdmnUsers.ChooseOrderItemsSelf(False, "", "", selectStr) then
            gdcGdmnUsers.Close
            gdcGdmnUsers.SubSet = "OnlySelected"
            gdcGdmnUsers.Open
            qUsers = gdcGdmnUsers.SelectedID.Count
        
            if  qUsers > 0 then
              userStr = gdcGdmnUsers.SelectedID.CommaText
              dim isErr
              on error resume next
              call gdcBaseManager.ExecSingleQuery("select USR$CONTACTKEY from USR$WEB_DEBT", Transaction)
              isErr = Err.Description <> ""
              on error goto 0
              if isErr then
                call gdcBaseManager.ExecSingleQuery("CREATE GLOBAL TEMPORARY TABLE USR$WEB_DEBT ( " & _
                  "  ID	DINTKEY NOT NULL, " & _
                  "  USR$CONTACTKEY	USR$VBPF_HEADCOMPANY, " & _
                  "  USR$SALDO_DEBT	DCURRENCY, " & _
                  "  USR$SALDO_CREDIT	DCURRENCY, " & _
                  "  USR$SALDO	DCURRENCY, " & _
                  "  USR$DAYLEFT	DSMALLINT, " & _
                  "  USR$DATEDEBT	DDATE, " & _
                  "  USR$CONTRNUMBER	DTEXT20,  " & _
                  "  USR$CONTRDATE	DDATE) " & _
                  "  on commit DELETE rows ", Transaction)
                call gdcBaseManager.ExecSingleQuery("GRANT ALL ON USR$WEB_DEBT TO administrator ", Transaction)
                Transaction.Commit
                Transaction.StartTransaction
              end if
              dim ibsqlDelete
              set ibsqlDelete = Creator.GetObject(nil, "TIBSQL", "")
              ibsqlDelete.Transaction = Transaction
              ibsqlDelete.SQl.Text = _
                " delete from USR$WEB_DEBT "
              ibsqlDelete.ExecQuery
              ibsqlCustomers.Close
              ibsqlCustomers.SQL.Text = _
               " WITH RECURSIVE " & _
               "            departs AS ( " & _
               "         SELECT " & _
               "            parent " & _
               "         FROM " & _
               "            gd_contact " & _
               "         WHERE USR$CONTRADEAGENTKEY in ( " & _
               "           select b.USR$CONTACTKEY as CONTACTKEY " & _
               "           from USR$GDMN_USERS b " & _
               "           where b.id in ( " & userStr & ")" & _
               "         ) AND coalesce(disabled, 0) = 0 " & _
               "          UNION ALL " & _
               "          SELECT " & _
               "            g2.parent " & _
               "          FROM " & _
               "           gd_contact g2 JOIN departs gt ON g2.id = gt.parent and g2.contacttype = 3 " & _
               "          ORDER BY 3 " & _
               "          ) " & _
               "          SELECT " & _
               "            list(distinct con.parent) as listID " & _
               "          FROM " & _
               "            departs con "
              ibsqlCustomers.ExecQuery
        
              CustomerStr = ibsqlCustomers.FieldByName("listID").AsString
              if CustomerStr <> "" then
                ibsqlDebt.Close
                dim c, cc, cc1(), cc2(), c1(), c2()
                c = Split(CustomerStr, ",")
                n = 1500
                l = UBound(c) - LBound(c)
                For k = 0 to l
                  if k < n then
                    Redim Preserve c1(k)
                    c1(k)= c(k)
                  else
                    Redim Preserve c2(k-n)
                    c2(k-n) = c(k)
                  end if
                Next
        
                ibsqlDebt.SQL.Text = Replace(sqlText, "%customer%", join(c1, ","))
                if l > n - 1 then
                  ibsqlDebt.SQL.Text = Replace(ibsqlDebt.SQL.Text, "%customer2%", join(c2, ","))
                else
                  ibsqlDebt.SQL.Text = Replace(ibsqlDebt.SQL.Text, "%customer2%", "-1")
                end if
                ibsqlDebt.ExecQuery
                i = 1
                while not ibsqlDebt.EOF
                  contactkey = ibsqlDebt.FieldByName("id").AsInteger
                  saldo = ibsqlDebt.FieldByName("saldo").AsCurrency
                  saldo_credit = ibsqlDebt.FieldByName("saldo_credit").AsCurrency
                  saldo_debt =  ibsqlDebt.FieldByName("saldo_debt").AsCurrency
                  dayleft = ibsqlDebt.FieldByName("dayleft").AsInteger
                  datedebt = ibsqlDebt.FieldByName("datedebt").AsDateTime
                  contrdate = ibsqlDebt.FieldByName("contrdate").AsDateTime
                  contrnumber = ibsqlDebt.FieldByName("contrnumber").AsString
                  ibsqlTempInsert.Close
                  ibsqlTempInsert.ParamByName("contactkey").AsInteger = contactkey
                  ibsqlTempInsert.ParamByName("saldo").AsCurrency = saldo
                  ibsqlTempInsert.ParamByName("saldo_credit").AsCurrency = saldo_credit
                  ibsqlTempInsert.ParamByName("saldo_debt").AsCurrency = saldo_debt
                  ibsqlTempInsert.ParamByName("datedebt").AsDateTime = datedebt
                  ibsqlTempInsert.ParamByName("dayleft").AsInteger = dayleft
                  ibsqlTempInsert.ParamByName("contrdate").AsDateTime = contrdate
                  ibsqlTempInsert.ParamByName("contrnumber").AsString = contrnumber
                  ibsqlTempInsert.ParamByName("id").AsInteger = i
                  ibsqlTempInsert.ExecQuery
                  ibsqlDebt.Next
                  i = i + 1
                wend
              end if
        
              while not gdcGdmnUsers.EOF
                  'Очищаем вспомогательную таблицу для этих пользователей
                ibsql.Close
                ibsql.SQL.Text = _
                  "delete from USR$GDMN_DEBT where USR$USERKEY = " & gdcGdmnUsers.FieldByName("USR$CONTACTKEY").AsInteger
                ibsql.ExecQuery
                CustomerStr = ""
                ibsqlCustomers.Close
                ibsqlCustomers.SQL.Text = _
                  "  WITH RECURSIVE " & _
                  "      departs AS ( " & _
                  "    SELECT " & _
                  "      parent " & _
                  "    FROM " & _
                  "      gd_contact " & _
                  "    WHERE (USR$CONTRADEAGENTKEY = :contactkey " & _
                  "      OR coalesce(USR$VBPF_DOPTRADEAGENTKEY, 0) = :contactkey " & _
                  "      OR coalesce(USR$VBPF_MERCHANDISER, 0) = :contactkey) " & _
                  "      AND coalesce(disabled, 0) = 0 " & _
                  "    UNION ALL " & _
                  "    SELECT " & _
                  "      g2.parent " & _
                  "    FROM " & _
                  "      gd_contact g2 JOIN departs gt ON g2.id = gt.parent and g2.contacttype = 3 " & _
                  "    ORDER BY 3 " & _
                  "    ) " & _
                  "    SELECT " & _
                  "      list(distinct con.parent) as listID " & _
                  "    FROM " & _
                  "      departs con "
                ibsqlCustomers.ParamByName("contactkey").AsInteger =  gdcGdmnUsers.FieldByName("USR$CONTACTKEY").AsInteger
                ibsqlCustomers.ExecQuery
                CustomerStr = ibsqlCustomers.FieldByName("listID").AsString
                if CustomerStr <> "" then
                  cc = Split(CustomerStr, ",")
                  n = 1500
                  l = UBound(cc) - LBound(cc)
                  For k = 0 to l
                    if k < n then
                      Redim Preserve cc1(k)
                      cc1(k)= cc(k)
                    else
                      Redim Preserve cc2(k-n)
                      cc2(k-n) = cc(k)
                    end if
                  Next
        
                  dim strWhere
                  if l > n - 1 then
                    strWhere = join(cc2, ",")
                  else
                    strWhere = "-1"
                  end if
        
                  ibsqlTempDebt.Close
                  ibsqlTempDebt.SQL.Text = _
                     " select * " & _
                     " from USR$WEB_DEBT b " & _
                     " where (b.USR$CONTACTKEY in (" & join(cc1, ",") & ") or b.USR$CONTACTKEY in (" & strWhere & ") ) "
                  ibsqlTempDebt.ExecQuery
                  while not ibsqlTempDebt.EOF
                    contactkey = ibsqlTempDebt.FieldByName("USR$CONTACTKEY").AsInteger
                    saldo = ibsqlTempDebt.FieldByName("USR$SALDO").AsCurrency
                    saldo_credit = ibsqlTempDebt.FieldByName("USR$SALDO_CREDIT").AsCurrency
                    saldo_debt =  ibsqlTempDebt.FieldByName("USR$SALDO_DEBT").AsCurrency
                    dayleft = ibsqlTempDebt.FieldByName("USR$DAYLEFT").AsInteger
                    datedebt = ibsqlTempDebt.FieldByName("USR$DATEDEBT").AsDateTime
                    userkey = gdcGdmnUsers.FieldByName("USR$CONTACTKEY").AsInteger
                    contrdate = ibsqlTempDebt.FieldByName("usr$contrdate").AsDateTime
                    contrnumber = ibsqlTempDebt.FieldByName("usr$contrnumber").AsString
                    set ibsqlGetID = Creator.GetObject(NULL, "TIBSQL", "")
                    ibsqlGetID.Transaction = Transaction
                    ibsqlGetID.SQL.Text = "SELECT GEN_ID(USR$GDMN_DEBT, 1) FROM RDB$DATABASE"
                    ibsqlGetID.Close
                    ibsqlGetID.ExecQuery
                    ID = ibsqlGetID.Fields(0).AsInteger
                    ibsqlInsert.Close
                    ibsqlInsert.ParamByName("id").AsInteger = ID
                    ibsqlInsert.ParamByName("userkey").AsInteger = userkey
                    ibsqlInsert.ParamByName("contactkey").AsInteger = contactkey
                    ibsqlInsert.ParamByName("saldo").AsCurrency = saldo
                    ibsqlInsert.ParamByName("saldo_credit").AsCurrency = saldo_credit
                    ibsqlInsert.ParamByName("saldo_debt").AsCurrency = saldo_debt
                    ibsqlInsert.ParamByName("datedebt").AsDateTime = datedebt
                    ibsqlInsert.ParamByName("dayleft").AsInteger = dayleft
                    ibsqlInsert.ParamByName("contrdate").AsDateTime = contrdate
                    ibsqlInsert.ParamByName("contrnumber").AsString = contrnumber
                    ibsqlInsert.ExecQuery
                    ibsqlTempDebt.Next
                  wend
                end if
                gdcGdmnUsers.Next
              wend
            end if
          end if
          if Transaction.InTransaction then
            Transaction.Commit
          end if
        End Function
        sub web_handCreateDebt_Agents_Rollback(Transaction)
           if Transaction.InTransaction then
            Transaction.Rollback
          end if
        end sub
        
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147123326_1730903579 web_recalcParametres"
  - 
    Properties: 
      Class: "TgdcFunction"
      RUID: 241050896_1971205439
      AlwaysOverwrite: False
      DontRemove: False
      IncludeSiblings: False
    Fields: 
      NAME: "web_getDebt2_0_0"
      COMMENT: ~
      EVENT: ~
      FUNCTIONTYPE: ~
      GROUPNAME: ~
      INHERITEDRULE: 0
      LANGUAGE: "VBScript"
      LOCALNAME: ~
      MODIFYDATE: ~
      MODULE: "UNKNOWN"
      MODULECODE: "1010001_17 APPLICATION"
      OBJECTNAME: "APPLICATION"
      OWNERNAME: ~
      PUBLICFUNCTION: 1
      SHORTCUT: ~
      USEDEBUGINFO: 0
      EDITIONDATE: 2023-04-07T12:59:16+03:00
      DISPLAYSCRIPT: | 
        WEB_GETDEBT2_0_0
        FINALIZATION_GETDEBT2_0_0
        
      ENTEREDPARAMS: !!binary > 
        U0xQUlBSU1QFAAAATVNHSUQFAAAATVNHSUQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARk5TVFBS
        U1QIAAAAQ09OU1VNRVIIAAAAQ09OU1VNRVIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARk5TVFBS
        U1QLAAAAQ09OU1VNRVJLRVkLAAAAQ09OU1VNRVJLRVkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        Rk5TVFBSU1QIAAAAUFJPRFVDRVIIAAAAUFJPRFVDRVIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        Rk5TVFBSU1QLAAAAUFJPRFVDRVJLRVkLAAAAUFJPRFVDRVJLRVkAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAARk5TVFBSU1QHAAAAQ09NUEFOWQcAAABDT01QQU5ZAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAEZOU1RQUlNUCgAAAENPTVBBTllLRVkKAAAAQ09NUEFOWUtFWQAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAABGTlNUUFJTVAkAAABBUFBTWVNURU0JAAAAQVBQU1lTVEVNAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAEZOU1RQUlNUCwAAAEFQUFNZU1RFTUlECwAAAEFQUFNZU1RFTUlEAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAEZOU1RQUlNUDAAAAEFQUFNZU1RFTUtFWQwAAABBUFBTWVNURU1LRVkA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARk5TVFBSU1QJAAAAT0JKUEFSQU1TCQAAAE9CSlBBUkFN
        UwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNUUFJTVAcAAABWRVJTSU9OBwAAAFZFUlNJT04A
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARk5TVFBSU1QKAAAAQ09OVEFDVEtFWQoAAABDT05UQUNU
        S0VZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZOU1RQUlNUBQAAAE9SREVSBQAAAE9SREVSAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZOU1RQUlNUCwAAAFRSQU5TQUNUSU9OCwAAAFRSQU5TQUNU
        SU9OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZOU1RQUlNUCAAAAERFVklDRUlECAAAAERFVklD
        RUlEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZOU1RQUlNUCwAAAFNUQVRVU0VSUk9SCwAAAFNU
        QVRVU0VSUk9SAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZOU1RQUlNUBwAAAFJFRk5BTUUHAAAA
        UkVGTkFNRQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTlNURkxQUg==
      SCRIPT: | 
        '#include web_formatDate
        '#include web_JSonString
        '#include web_process_error_ref_2_0_0
        '#include web_process_ready_ref_2_0_0
        Option Explicit
        Function web_getDebt2_0_0(msgID, consumer, consumerkey, producer, producerkey, Company, Companykey, AppSystem, AppSystemId, AppSystemkey, objParams, version, contactkey, order, transaction, deviceId, statusError, refName)
          web_getDebt2_0_0 = false
          dim  hasError, AError, message
          hasError = false
          AError = ""
          dim Creator, SS, ibsql
          set Creator = new TCreator
          Set SS = Creator.GetObject(Array(""), "TStringStream", "")
          dim  contactId, errMessage
          errMessage = ""
          if Assigned(objParams.Value("contactId")) then
            contactId = objParams.Value("contactId").Value
          else
            contactId = ""
          end if
        
          if contactId = "" then
            errMessage =  "В запросе от мобильного приложения не выбрана организация-плательщик"
            web_getDebt2_0_0 = web_process_error_ref_2_0_0(msgID, consumer, consumerkey,  _
              producer, producerkey,Company, Companykey, AppSystem, AppSystemId, AppSystemkey, _
              version, contactkey, order, transaction, deviceId, errMessage)
            exit function
          end if
          'Проверить, есть ли таблица gdmn_debt
          set ibsql = Creator.GetObject(nil, "TIBSQL", "")
          ibsql.Transaction = gdcBaseManager.ReadTransaction
          ibsql.SQL.Text =   "select * " & vbCrLf & _
            "from RDB$RELATIONS " & vbCrLf & _
            "where RDB$RELATION_NAME = 'USR$GDMN_DEBT' "
          ibsql.ExecQuery
        
           if ibsql.RecordCount = 0 then
            errMessage =  "Отсутствует таблица для дебиторских задолженностей в Гедемине "
            web_getDebt2_0_0 = web_process_error_ref_2_0_0(msgID, consumer, consumerkey,  _
              producer, producerkey,Company, Companykey, AppSystem, AppSystemId, AppSystemkey, _
              version, contactkey, order, transaction, deviceId, errMessage)
            exit function
          end if
        
          on error resume next
          ibsql.Close
          ibsql.SQL.Text =   "select c.name " & vbCrLf & _
            "from gd_contact c " & vbCrLf & _
            "where c.id =  " & contactId
          ibsql.ExecQuery
          dim contactName, name
          name = web_JSonString(ibsql.FieldByName("name").AsString)
          contactName = mid(name, 2, len(name) - 2)
          message = "Не удалось получить данные по задолженности организации " & contactName & ". Повторите запрос позже."
        
          dim ibsqlInsert, ibsqlDebt, ibsqlDelete, contrdate, contrnumber
          dim saldo, saldo_credit, saldo_debt, userkey, dayleft, datedebt, id, customer
        
          set ibsqlInsert = Creator.GetObject(nil, "TIBSQL", "")
          ibsqlInsert.Transaction = Transaction
          ibsqlInsert.SQL.Text = _
            "insert into USR$GDMN_DEBT (ID, USR$CONTACTKEY, USR$USERKEY, USR$SALDO, USR$SALDO_CREDIT, USR$SALDO_DEBT, USR$DATEDEBT, USR$DAYLEFT, USR$CONTRNUMBER, USR$CONTRDATE) " & _
            "values (:ID, :CONTACTKEY, :USERKEY, :SALDO, :SALDO_CREDIT, :SALDO_DEBT, :DATEDEBT, :DAYLEFT, :CONTRNUMBER, :CONTRDATE) "
            
          set ibsqlDelete = Creator.GetObject(nil, "TIBSQL", "")
          ibsqlDelete.Transaction = Transaction
          ibsqlDelete.SQL.Text = _
            "delete from USR$GDMN_DEBT b where b.USR$CONTACTKEY = :customer "
          ibsqlDelete.ParamByName("customer").AsInteger = contactId
          ibsqlDelete.ExecQuery
          if err.Number <> 0 then
             errMessage = message
             web_getDebt2_0_0 = web_process_error_ref_2_0_0(msgID, consumer, consumerkey,  _
               producer, producerkey,Company, Companykey, AppSystem, AppSystemId, AppSystemkey, _
               version, contactkey, order, transaction, deviceId, errMessage)
            exit function
          end if
        
          ibsql.Close
          ibsql.SQL.Text = _
            "select b.USR$CONTACTKEY " & vbCrLf & _
            "from usr$gdmn_users b " & vbCrLf & _
            "where coalesce(b.USR$NOTACTIVE, 0) = 0 " & vbCrLf & _
            "  and b.USR$SYSTEMKEY = :systemkey " & vbCrLf & _
            "  and exists( select c.id " & vbCrLf & _
            "    from gd_contact c " & vbCrLf & _
            "    where c.parent = :customer " & vbCrLf & _
            "      and c.USR$CONTRADEAGENTKEY = b.USR$CONTACTKEY " & vbCrLf & _
            "      and coalesce(c.DISABLED, 0) = 0) "
          ibsql.ParamByName("customer").AsInteger = contactId
          ibsql.ParamByName("systemkey").AsInteger = AppSystemkey
          ibsql.ExecQuery
          if err.Number <> 0 then
            errMessage = message
            web_getDebt2_0_0 = web_process_error_ref_2_0_0(msgID, consumer, consumerkey,  _
              producer, producerkey,Company, Companykey, AppSystem, AppSystemId, AppSystemkey, _
              version, contactkey, order, transaction, deviceId, errMessage)
            exit function
          end if
          on error goto 0
        
          set ibsqlDebt = Creator.GetObject(nil, "TIBSQL", "")
          ibsqlDebt.Transaction = Transaction
          ' Сначала получим новые данные по дебиторке в базе  и запишем в usr$gdmn_debt
          ibsqlDebt.SQL.Text = _
            "execute block(customer integer = :customer) " & vbCrLf & _
            "RETURNS ( " & vbCrLf & _
            "    NAME VARCHAR(60), " & vbCrLf & _
            "    ID INTEGER, " & vbCrLf & _
            "    CURRKEY INTEGER, " & vbCrLf & _
            "    DAYLEFT INTEGER, " & vbCrLf & _
            "    DATEDEBT DATE, " & vbCrLf & _
            "    SALDO NUMERIC(18, 4), " & vbCrLf & _
            "    SALDO_CREDIT NUMERIC(15, 4), " & vbCrLf & _
            "    SALDO_DEBT NUMERIC(18, 4), " & vbCrLf & _
            "    CONTRDATE DATE, " & vbCrLf & _
            "    CONTRNUMBER VARCHAR(20)) " & vbCrLf & _
            " AS " & vbCrLf & _
            "  declare variable tempsum numeric(15,4); " & vbCrLf & _
            "  declare variable tempsaldo numeric(15,4); " & vbCrLf & _
            "  declare variable pay_int decimal(18,4); " & vbCrLf & _
            "  declare variable pay_int_curr decimal(18,4); " & vbCrLf & _
            "  declare variable datedebt_temp date; " & vbCrLf & _
            "  declare variable date_debt1 date; " & vbCrLf & _
            "  declare variable countday integer; " & vbCrLf & _
            "  declare variable countaddday integer; " & vbCrLf & _
            "  declare variable tmp_countday integer; " & vbCrLf & _
            "  declare variable tmp_countaddday integer; " & vbCrLf & _
            "  declare variable isok integer; " & vbCrLf & _
            "  declare variable isfirst integer; " & vbCrLf & _
            "  declare variable paysum numeric(15,4); " & vbCrLf & _
            "  declare variable paysum_temp numeric(15,4); " & vbCrLf & _
            "  declare variable documentkey integer; " & vbCrLf & _
            "  declare variable doc_temp integer; " & vbCrLf & _
            "  declare variable lastrealdate DATE; " & vbCrLf & _
            "  declare variable firstdate DATE; " & vbCrLf & _
            "  declare variable tmpfirstdate DATE; " & vbCrLf & _
            "  declare variable tmpisp VARCHAR(60); " & vbCrLf & _
            "BEGIN " & vbCrLf & _
            "  firstdate = CAST((CAST('17.11.1858'AS DATE)+GEN_ID(gd_g_entry_balance_date,0)) AS DATE); " & vbCrLf & _
            "  if (firstdate > CURRENT_DATE) then " & vbCrLf & _
            "    tmpfirstdate = CAST('17.11.1858'AS DATE); " & vbCrLf & _
            "  else " & vbCrLf & _
            "    tmpfirstdate = firstdate; " & vbCrLf & _
            "     FOR " & vbCrLf & _
            "        SELECT " & vbCrLf & _
            "          con.name, " & vbCrLf & _
            "          con.id, " & vbCrLf & _
            "          SUM(e.debitncu - e.creditncu) AS saldo " & vbCrLf & _
            "        FROM " & vbCrLf & _
            "          (select e.usr$gs_customer, e.debitncu, e.creditncu " & vbCrLf & _
            "          from " & vbCrLf & _
            "            ac_entry e " & vbCrLf & _
            "          where " & vbCrLf & _
            "            e.entrydate <= CURRENT_DATE AND " & vbCrLf & _
            "            e.accountkey = 366201 AND " & vbCrLf & _
            "            e.companykey + 0 = <companykey/> AND " & vbCrLf & _
            "            e.currkey = 200010 and e.usr$gs_customer = :customer " & vbCrLf & _
            "     ) e " & vbCrLf & _
            "         LEFT JOIN " & vbCrLf & _
            "              gd_contact con ON e.usr$gs_customer = con.id " & vbCrLf & _
            "        GROUP BY " & vbCrLf & _
            "          1, 2 " & vbCrLf & _
            "        HAVING g_m_round(SUM(e.debitncu - e.creditncu) / 10) * 10 <> 0 " & vbCrLf & _
            "        ORDER BY 1 " & vbCrLf & _
            "        INTO :NAME, " & vbCrLf & _
            "             :ID, " & vbCrLf & _
            "             :SALDO " & vbCrLf & _
            "      DO " & vbCrLf & _
            "      BEGIN " & vbCrLf & _
            " " & vbCrLf & _
            "        tmp_countday = 0; " & vbCrLf & _
            "        tmp_countaddday = 0; " & vbCrLf & _
            " " & vbCrLf & _
            "        countday = 0; " & vbCrLf & _
            "        countaddday = 0; " & vbCrLf & _
            "        dayleft = 0; " & vbCrLf & _
            "        SELECT " & vbCrLf & _
            "          FIRST (1) doc.documentdate, doc.NUMBER, p.usr$countday, p.usr$vmk_countaddday, " & vbCrLf & _
            "          (CASE WHEN p.usr$isbank = 1 THEN COALESCE(p.usr$countday, 0) + 2 * COALESCE(p.usr$countday, 0) / 5 ELSE COALESCE(p.usr$countday, 0) END) AS countday, " & vbCrLf & _
            "          (CASE WHEN p.usr$isaddbank = 1 THEN COALESCE(p.usr$vmk_countaddday, 0) + 2 * COALESCE(p.usr$vmk_countaddday, 0) / 5 ELSE COALESCE(p.usr$vmk_countaddday, 0) END) AS countaddday " & vbCrLf & _
            "        FROM " & vbCrLf & _
            "          usr$inv_contract cont " & vbCrLf & _
            "            LEFT JOIN gd_document doc ON cont.documentkey = doc.id " & vbCrLf & _
            "            LEFT JOIN usr$inv_paycond p ON cont.usr$paycondkey = p.id " & vbCrLf & _
            "        WHERE " & vbCrLf & _
            "          cont.usr$contactkey = :id AND cont.usr$vmk_typecontract IS NULL AND doc.documentdate <= CURRENT_DATE  and (cont.usr$DATEEND >= CURRENT_DATE or cont.usr$DATEEND is null) " & vbCrLf & _
            "        ORDER BY doc.documentdate DESC " & vbCrLf & _
            "        INTO :contrdate, :contrnumber, :tmp_countday, :tmp_countaddday, :countday, :countaddday; " & vbCrLf & _
            "        countday = COALESCE(countday, 0) + COALESCE(countaddday, 0); " & vbCrLf & _
            "        datedebt_temp = contrdate; " & vbCrLf & _
            "        IF (SALDO < 0) THEN " & vbCrLf & _
            "        BEGIN " & vbCrLf & _
            "          SALDO_CREDIT = -SALDO; " & vbCrLf & _
            "          SALDO = 0; " & vbCrLf & _
            "        END " & vbCrLf & _
            "        ELSE " & vbCrLf & _
            "          SALDO_CREDIT = 0; " & vbCrLf & _
            " " & vbCrLf & _
            "        SALDO_DEBT = 0; " & vbCrLf & _
            "        PAY_INT = 0; " & vbCrLf & _
            "        IF (SALDO > 0) THEN " & vbCrLf & _
            "        BEGIN " & vbCrLf & _
            "          date_debt1 = CURRENT_DATE - countday; " & vbCrLf & _
            "          SELECT " & vbCrLf & _
            "            SUM(CASE WHEN e.entrydate < :date_debt1 " & vbCrLf & _
            "                THEN e.debitncu - e.creditncu ELSE 0 END) AS saldo_debt, " & vbCrLf & _
            "            SUM(CASE WHEN (e.entrydate >= :date_debt1 AND e.entrydate <= CURRENT_DATE) " & vbCrLf & _
            "                THEN e.creditncu - (CASE WHEN e.debitncu < 0 THEN e.debitncu ELSE 0 END) ELSE 0 END) AS pay_int " & vbCrLf & _
            "          FROM " & vbCrLf & _
            "            ac_entry e " & vbCrLf & _
            "          WHERE " & vbCrLf & _
            "            e.entrydate <= CURRENT_DATE AND " & vbCrLf & _
            "            e.accountkey = 366201 AND " & vbCrLf & _
            "            e.usr$gs_customer = :id  AND e.currkey = 200010 " & vbCrLf & _
            "          INTO " & vbCrLf & _
            "           :SALDO_DEBT, " & vbCrLf & _
            "           :PAY_INT; " & vbCrLf & _
            " " & vbCrLf & _
            "          IF (SALDO_DEBT IS NULL) THEN " & vbCrLf & _
            "            SALDO_DEBT = 0; " & vbCrLf & _
            "          IF (PAY_INT IS NULL) THEN " & vbCrLf & _
            "            PAY_INT = 0; " & vbCrLf & _
            " " & vbCrLf & _
            "          SALDO_DEBT = round(SALDO_DEBT - PAY_INT, 2); " & vbCrLf & _
            "          IF (SALDO_DEBT < 0) THEN " & vbCrLf & _
            "            SALDO_DEBT = 0; " & vbCrLf & _
            "          tempsum = saldo; " & vbCrLf & _
            "          isOk = 0; " & vbCrLf & _
            "          isFirst = 1; " & vbCrLf & _
            "          paysum = 0; " & vbCrLf & _
            " " & vbCrLf & _
            "          tempsum = saldo; " & vbCrLf & _
            "          isOk = 0; " & vbCrLf & _
            "          isFirst = 1; " & vbCrLf & _
            "          paysum = 0; " & vbCrLf & _
            "          FOR " & vbCrLf & _
            "            SELECT e.entrydate, e.debitncu - e.creditncu " & vbCrLf & _
            "            FROM " & vbCrLf & _
            "              ac_entry e " & vbCrLf & _
            "            WHERE " & vbCrLf & _
            "                e.accountkey = 366201 AND " & vbCrLf & _
            "                e.entrydate <= CURRENT_DATE AND " & vbCrLf & _
            "                e.usr$gs_customer = :id AND " & vbCrLf & _
            "                e.companykey + 0 = <companykey/> and (e.debitncu > 0 or e.creditncu < 0) " & vbCrLf & _
            "            ORDER BY 1 DESC " & vbCrLf & _
            "            INTO :datedebt_temp, :tempsaldo " & vbCrLf & _
            "          DO " & vbCrLf & _
            "          BEGIN " & vbCrLf & _
            "            IF (isOk = 0) THEN " & vbCrLf & _
            "            BEGIN " & vbCrLf & _
            "              IF (tempsum > 0) THEN " & vbCrLf & _
            "              BEGIN " & vbCrLf & _
            "                tempsum = tempsum - tempsaldo; " & vbCrLf & _
            "              END " & vbCrLf & _
            "              ELSE " & vbCrLf & _
            "              BEGIN " & vbCrLf & _
            "                isOK = 1; " & vbCrLf & _
            "                LEAVE; " & vbCrLf & _
            "              END " & vbCrLf & _
            "              DATEDEBT = DATEDEBT_TEMP; " & vbCrLf & _
            "            END " & vbCrLf & _
            "          END " & vbCrLf & _
            "        END " & vbCrLf & _
            "        IF (SALDO_DEBT > 0) THEN " & vbCrLf & _
            "        BEGIN " & vbCrLf & _
            "          DAYLEFT = CURRENT_DATE - DATEDEBT - COUNTDAY; " & vbCrLf & _
            "          if ( dayleft < 0 ) then " & vbCrLf & _
            "            dayleft = 0; " & vbCrLf & _
            "        END " & vbCrLf & _
            "        ELSE " & vbCrLf & _
            "          dayleft = 0; " & vbCrLf & _
            " " & vbCrLf & _
            "        SALDO = ROUND(saldo, 2); " & vbCrLf & _
            "        SUSPEND; " & vbCrLf & _
            "      END " & vbCrLf & _
            "end "
          ibsqlDebt.ParamByName("customer").AsInteger = contactId
          if ibsql.RecordCount > 0 then
            on error resume next
            ibsqlDebt.ExecQuery
            if err.Number <> 0 then
              errMessage = message
              web_getDebt2_0_0 = web_process_error_ref_2_0_0(msgID, consumer, consumerkey,  _
                producer, producerkey,Company, Companykey, AppSystem, AppSystemId, AppSystemkey, _
                version, contactkey, order, transaction, deviceId, errMessage)
              exit function
            end if
            on error goto 0
            if ibsqlDebt.RecordCount > 0 then
              while not ibsql.EOF
                customer = ibsqlDebt.FieldByName("id").AsInteger
                saldo = ibsqlDebt.FieldByName("saldo").AsCurrency
                saldo_credit = ibsqlDebt.FieldByName("saldo_credit").AsCurrency
                saldo_debt =  ibsqlDebt.FieldByName("saldo_debt").AsCurrency
                dayleft = ibsqlDebt.FieldByName("dayleft").AsInteger
                datedebt = ibsqlDebt.FieldByName("datedebt").AsDateTime
                contrdate = ibsqlDebt.FieldByName("contrdate").AsDateTime
                contrnumber = ibsqlDebt.FieldByName("contrnumber").AsString
                userkey = ibsql.FieldByName("USR$CONTACTKEY").AsInteger
                dim ibsqlGetID
                set ibsqlGetID = Creator.GetObject(NULL, "TIBSQL", "")
                ibsqlGetID.Transaction = Transaction
                ibsqlGetID.SQL.Text = "SELECT GEN_ID(USR$GDMN_DEBT, 1) FROM RDB$DATABASE"
                ibsqlGetID.Close
                ibsqlGetID.ExecQuery
                ID = ibsqlGetID.Fields(0).AsInteger
                ibsqlInsert.Close
                ibsqlInsert.ParamByName("id").AsInteger = ID
                ibsqlInsert.ParamByName("userkey").AsInteger = userkey
                ibsqlInsert.ParamByName("contactkey").AsInteger = customer
                ibsqlInsert.ParamByName("saldo").AsCurrency = saldo
                ibsqlInsert.ParamByName("saldo_credit").AsCurrency = saldo_credit
                ibsqlInsert.ParamByName("saldo_debt").AsCurrency = saldo_debt
                ibsqlInsert.ParamByName("datedebt").AsDateTime = datedebt
                ibsqlInsert.ParamByName("dayleft").AsInteger = dayleft
                ibsqlInsert.ParamByName("contrdate").AsDateTime = contrdate
                ibsqlInsert.ParamByName("contrnumber").AsString = contrnumber
                on error resume next
                ibsqlInsert.ExecQuery
                if err.Number <> 0 then
                  errMessage = message
                  web_getDebt2_0_0 = web_process_error_ref_2_0_0(msgID, consumer, consumerkey,  _
                    producer, producerkey,Company, Companykey, AppSystem, AppSystemId, AppSystemkey, _
                    version, contactkey, order, transaction, deviceId, errMessage)
                  exit function
                end if
                ibsql.Next
              wend
            end if
          end if
        
          'Подготавливаем StringStream, в котором будет содержаться массив справочников
        '  SS.WriteLn("{""status"": ""READY""," )
        '  SS.WriteLn("""head"":{" )
        '  SS.WriteLn("""appSystem"":{")
        '  SS.WriteLn("""id"":""" & AppSystemId & """, ")
        '  SS.WriteLn("""name"":" & web_JSonString(AppSystem) & "},")
        '  SS.WriteLn("""company"":{")
        '  SS.WriteLn("""id"":""" & Companykey & """, ")
        '  SS.WriteLn("""name"":" & web_JSonString(Company) & "},")
        '  SS.WriteLn("""producer"":{")
        '  SS.WriteLn("""id"":""" & producerkey & """, ")
        '  SS.WriteLn("""name"":""" & producer & """},")
        '  SS.WriteLn("""consumer"":{")
        '  SS.WriteLn("""id"":""" & consumerkey & """, ")
        '  SS.WriteLn("""name"":""" & consumer & """},")
        '  if msgID <> "" then
        '    SS.WriteLn("""replyTo"":""" & msgID & """, ")
        '  end if
        '  SS.WriteLn("""order"":" & order & ", ")
        '  SS.WriteLn("""deviceId"":""" & deviceId & """, ")
        '  SS.WriteLn("""dateTime"":""" & web_formatDate(Date) & """")
        '  SS.WriteLn("}, ")
        '  SS.WriteLn("""body"":{")
        '  SS.WriteLn("""type"":""ONE_REF"",")
        '  SS.WriteLn("""version"":" & version & ", ")
        '  SS.WriteLn("""payload"": {" )
          dim ssTemp, jsonText, jsonFooter
          'jsonText = SS.DataString
          jsonFooter = "}}}"
        
          jsonText = web_process_ready_ref_2_0_0(contactkey, consumer, consumerkey, Companykey, AppSystemkey, _
            AppSystemId, AppSystem, Company, producerkey, producer, msgID, deviceId, version, _
            hasError, AError, statusError, refName, jsonFooter )
          'ssTemp = web_process_ready_ref_2_0_0(contactkey, consumer, consumerkey, Companykey, AppSystemkey, hasError, AError, statusError, refName)
         ' jsonText = jsonText  & vbCrLf & ssTemp
        '  jsonText = jsonText  &  "}}}"
          web_getDebt2_0_0 =  finalization_getDebt2_0_0(errMessage, jsonText)
        End Function
        function finalization_getDebt2_0_0(errorMessage, json)
          dim a(1)
          a(0) = errorMessage
          a(1) = json
          finalization_getDebt2_0_0 = a
        end function
        
    Set: 
      - 
        Table: "RP_ADDITIONALFUNCTION"
        Items: 
          - 
            ADDFUNCTIONKEY: "147040220_1730903579 web_formatDate"
          - 
            ADDFUNCTIONKEY: "147040221_1730903579 web_JSonString"
          - 
            ADDFUNCTIONKEY: "241111139_1971205439 web_process_error_ref_2_0_0"
          - 
            ADDFUNCTIONKEY: "241111152_1971205439 web_process_ready_ref_2_0_0"